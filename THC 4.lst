CCS PCM C Compiler, Version 4.074, 38112               09-dez-17 22:41

               Filename: C:\Users\Raulstar\Google Drive\THC\THC 4.lst

               ROM used: 1204 words (15%)
                         Largest free fragment is 2048
               RAM used: 19 (5%) at main() level
                         31 (8%) worst case
               Stack:    4 locations

*
0000:  MOVLW  00
0001:  MOVWF  0A
0002:  GOTO   20E
0003:  NOP
.................... #include <16f877a.h> 
.................... //////// Standard Header file for the PIC16F877A device //////////////// 
.................... #device PIC16F877A 
.................... #list 
....................  
.................... #use delay(clock=1000000) 
*
00E9:  MOVLW  2C
00EA:  MOVWF  04
00EB:  BCF    03.7
00EC:  MOVF   00,W
00ED:  BTFSC  03.2
00EE:  GOTO   0F5
00EF:  MOVLW  52
00F0:  MOVWF  77
00F1:  DECFSZ 77,F
00F2:  GOTO   0F1
00F3:  DECFSZ 00,F
00F4:  GOTO   0EF
00F5:  RETLW  00
.................... #fuses hs 
.................... #FUSES PUT    
.................... #include <lcd.c> 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////                             LCDD.C                                //// 
.................... ////                 Driver for common LCD modules                     //// 
.................... ////                                                                   //// 
.................... ////  lcd_init()   Must be called before any other function.           //// 
.................... ////                                                                   //// 
.................... ////  lcd_putc(c)  Will display c on the next position of the LCD.     //// 
.................... ////                     The following have special meaning:           //// 
.................... ////                      \f  Clear display                            //// 
.................... ////                      \n  Go to start of second line               //// 
.................... ////                      \b  Move back one position                   //// 
.................... ////                                                                   //// 
.................... ////  lcd_gotoxy(x,y) Set write position on LCD (upper left is 1,1)    //// 
.................... ////                                                                   //// 
.................... ////  lcd_getc(x,y)   Returns character at position x,y on LCD         //// 
.................... ////                                                                   //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2007 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... // As defined in the following structure the pin connection is as follows: 
.................... //     D0  enable 
.................... //     D1  rs 
.................... //     D2  rw 
.................... //     D4  D4 
.................... //     D5  D5 
.................... //     D6  D6 
.................... //     D7  D7 
.................... // 
.................... //   LCD pins D0-D3 are not used and PIC D3 is not used. 
....................  
.................... // Un-comment the following define to use port B 
.................... // #define use_portb_lcd TRUE 
....................  
....................  
.................... struct lcd_pin_map {                 // This structure is overlayed 
....................            BOOLEAN enable;           // on to an I/O port to gain 
....................            BOOLEAN rs;               // access to the LCD pins. 
....................            BOOLEAN rw;               // The bits are allocated from 
....................            BOOLEAN unused;           // low order up.  ENABLE will 
....................            int     data : 4;         // be pin B0. 
....................         } lcd; 
....................  
....................  
.................... #if defined use_portb_lcd 
....................    //#locate lcd = getenv("sfr:PORTB")    // This puts the entire structure over the port 
....................    #ifdef __pch__ 
....................     #locate lcd = 0xf81 
....................    #else 
....................     #locate lcd = 6 
....................    #endif 
....................    #define set_tris_lcd(x) set_tris_b(x) 
.................... #else 
....................    //#locate lcd = getenv("sfr:PORTD")    // This puts the entire structure over the port 
....................    #ifdef __pch__ 
....................     #locate lcd = 0xf83 
....................    #else 
....................     #locate lcd = 8 
....................    #endif 
....................    #define set_tris_lcd(x) set_tris_d(x) 
.................... #endif 
....................  
.................... #ifndef lcd_type 
.................... #define lcd_type 2           // 0=5x7, 1=5x10, 2=2 lines 
.................... #endif 
....................  
.................... #define lcd_line_two 0x40    // LCD RAM address for the second line 
....................  
....................  
.................... BYTE const LCD_INIT_STRING[4] = {0x20 | (lcd_type << 2), 0xc, 1, 6}; 
....................                              // These bytes need to be sent to the LCD 
....................                              // to start it up. 
....................  
....................  
....................                              // The following are used for setting 
....................                              // the I/O port direction register. 
....................  
.................... struct lcd_pin_map const LCD_WRITE = {0,0,0,0,0}; // For write mode all pins are out 
.................... struct lcd_pin_map const LCD_READ = {0,0,0,0,15}; // For read mode data pins are in 
....................  
....................  
....................  
.................... BYTE lcd_read_byte() { 
....................       BYTE low,high; 
....................       set_tris_lcd(LCD_READ); 
*
0102:  MOVLW  F0
0103:  BSF    03.5
0104:  MOVWF  08
....................       lcd.rw = 1; 
0105:  BCF    03.5
0106:  BSF    08.2
....................       delay_cycles(1); 
0107:  NOP
....................       lcd.enable = 1; 
0108:  BSF    08.0
....................       delay_cycles(1); 
0109:  NOP
....................       high = lcd.data; 
010A:  MOVF   08,W
010B:  SWAPF  08,W
010C:  ANDLW  0F
010D:  MOVWF  37
....................       lcd.enable = 0; 
010E:  BCF    08.0
....................       delay_cycles(1); 
010F:  NOP
....................       lcd.enable = 1; 
0110:  BSF    08.0
....................       delay_us(1); 
....................       low = lcd.data; 
0111:  MOVF   08,W
0112:  SWAPF  08,W
0113:  ANDLW  0F
0114:  MOVWF  36
....................       lcd.enable = 0; 
0115:  BCF    08.0
....................       set_tris_lcd(LCD_WRITE); 
0116:  MOVLW  00
0117:  BSF    03.5
0118:  MOVWF  08
....................       return( (high<<4) | low); 
0119:  BCF    03.5
011A:  SWAPF  37,W
011B:  MOVWF  77
011C:  MOVLW  F0
011D:  ANDWF  77,F
011E:  MOVF   77,W
011F:  IORWF  36,W
0120:  MOVWF  78
.................... } 
....................  
....................  
.................... void lcd_send_nibble( BYTE n ) { 
....................       lcd.data = n; 
*
00F6:  SWAPF  37,W
00F7:  ANDLW  F0
00F8:  MOVWF  77
00F9:  MOVLW  0F
00FA:  ANDWF  08,W
00FB:  IORWF  77,W
00FC:  MOVWF  08
....................       delay_cycles(1); 
00FD:  NOP
....................       lcd.enable = 1; 
00FE:  BSF    08.0
....................       delay_us(2); 
....................       lcd.enable = 0; 
00FF:  BCF    08.0
.................... } 
0100:  RETLW  00
....................  
....................  
.................... void lcd_send_byte( BYTE address, BYTE n ) { 
....................  
....................       lcd.rs = 0; 
0101:  BCF    08.1
....................       while ( bit_test(lcd_read_byte(),7) ) ; 
*
0121:  MOVF   78,W
0122:  MOVWF  36
0123:  BTFSC  36.7
0124:  GOTO   102
....................       lcd.rs = address; 
0125:  BTFSS  34.0
0126:  BCF    08.1
0127:  BTFSC  34.0
0128:  BSF    08.1
....................       delay_cycles(1); 
0129:  NOP
....................       lcd.rw = 0; 
012A:  BCF    08.2
....................       delay_cycles(1); 
012B:  NOP
....................       lcd.enable = 0; 
012C:  BCF    08.0
....................       lcd_send_nibble(n >> 4); 
012D:  SWAPF  35,W
012E:  MOVWF  36
012F:  MOVLW  0F
0130:  ANDWF  36,F
0131:  MOVF   36,W
0132:  MOVWF  37
0133:  CALL   0F6
....................       lcd_send_nibble(n & 0xf); 
0134:  MOVF   35,W
0135:  ANDLW  0F
0136:  MOVWF  36
0137:  MOVWF  37
0138:  CALL   0F6
.................... } 
0139:  RETLW  00
....................  
....................  
.................... void lcd_init() { 
....................     BYTE i; 
....................     set_tris_lcd(LCD_WRITE); 
013A:  MOVLW  00
013B:  BSF    03.5
013C:  MOVWF  08
....................     lcd.rs = 0; 
013D:  BCF    03.5
013E:  BCF    08.1
....................     lcd.rw = 0; 
013F:  BCF    08.2
....................     lcd.enable = 0; 
0140:  BCF    08.0
....................     delay_ms(15); 
0141:  MOVLW  0F
0142:  MOVWF  2C
0143:  CALL   0E9
....................     for(i=1;i<=3;++i) { 
0144:  MOVLW  01
0145:  MOVWF  2B
0146:  MOVF   2B,W
0147:  SUBLW  03
0148:  BTFSS  03.0
0149:  GOTO   152
....................        lcd_send_nibble(3); 
014A:  MOVLW  03
014B:  MOVWF  37
014C:  CALL   0F6
....................        delay_ms(5); 
014D:  MOVLW  05
014E:  MOVWF  2C
014F:  CALL   0E9
....................     } 
0150:  INCF   2B,F
0151:  GOTO   146
....................     lcd_send_nibble(2); 
0152:  MOVLW  02
0153:  MOVWF  37
0154:  CALL   0F6
....................     for(i=0;i<=3;++i) 
0155:  CLRF   2B
0156:  MOVF   2B,W
0157:  SUBLW  03
0158:  BTFSS  03.0
0159:  GOTO   163
....................        lcd_send_byte(0,LCD_INIT_STRING[i]); 
015A:  MOVF   2B,W
015B:  CALL   004
015C:  MOVWF  2C
015D:  CLRF   34
015E:  MOVF   2C,W
015F:  MOVWF  35
0160:  CALL   101
0161:  INCF   2B,F
0162:  GOTO   156
.................... } 
0163:  BCF    0A.3
0164:  BCF    0A.4
0165:  GOTO   235 (RETURN)
....................  
....................  
.................... void lcd_gotoxy( BYTE x, BYTE y) { 
....................    BYTE address; 
....................  
....................    if(y!=1) 
*
017F:  DECFSZ 31,W
0180:  GOTO   182
0181:  GOTO   185
....................      address=lcd_line_two; 
0182:  MOVLW  40
0183:  MOVWF  32
....................    else 
0184:  GOTO   186
....................      address=0; 
0185:  CLRF   32
....................    address+=x-1; 
0186:  MOVLW  01
0187:  SUBWF  30,W
0188:  ADDWF  32,F
....................    lcd_send_byte(0,0x80|address); 
0189:  MOVF   32,W
018A:  IORLW  80
018B:  MOVWF  33
018C:  CLRF   34
018D:  MOVF   33,W
018E:  MOVWF  35
018F:  CALL   101
.................... } 
....................  
.................... void lcd_putc( char c) { 
....................    switch (c) { 
*
0166:  MOVF   2F,W
0167:  XORLW  0C
0168:  BTFSC  03.2
0169:  GOTO   171
016A:  XORLW  06
016B:  BTFSC  03.2
016C:  GOTO   17B
016D:  XORLW  02
016E:  BTFSC  03.2
016F:  GOTO   191
0170:  GOTO   196
....................      case '\f'   : lcd_send_byte(0,1); 
0171:  CLRF   34
0172:  MOVLW  01
0173:  MOVWF  35
0174:  CALL   101
....................                    delay_ms(2); 
0175:  MOVLW  A6
0176:  MOVWF  77
0177:  DECFSZ 77,F
0178:  GOTO   177
0179:  NOP
....................                                            break; 
017A:  GOTO   19C
....................      case '\n'   : lcd_gotoxy(1,2);        break; 
017B:  MOVLW  01
017C:  MOVWF  30
017D:  MOVLW  02
017E:  MOVWF  31
*
0190:  GOTO   19C
....................      case '\b'   : lcd_send_byte(0,0x10);  break; 
0191:  CLRF   34
0192:  MOVLW  10
0193:  MOVWF  35
0194:  CALL   101
0195:  GOTO   19C
....................      default     : lcd_send_byte(1,c);     break; 
0196:  MOVLW  01
0197:  MOVWF  34
0198:  MOVF   2F,W
0199:  MOVWF  35
019A:  CALL   101
019B:  GOTO   19C
....................    } 
.................... } 
019C:  RETLW  00
....................  
.................... char lcd_getc( BYTE x, BYTE y) { 
....................    char value; 
....................  
....................     lcd_gotoxy(x,y); 
....................     while ( bit_test(lcd_read_byte(),7) ); // wait until busy flag is low 
....................     lcd.rs=1; 
....................     value = lcd_read_byte(); 
....................     lcd.rs=0; 
....................     return(value); 
.................... } 
....................  
.................... #FUSES WDT 
....................  
.................... int histerese=5; 
*
0219:  MOVLW  05
021A:  BCF    03.5
021B:  MOVWF  20
.................... int definida; 
.................... int lida=0; 
021C:  CLRF   22
.................... Int Vmin=25; 
021D:  MOVLW  19
021E:  MOVWF  23
.................... int temp=0; 
021F:  CLRF   24
.................... int menu=0; 
0220:  CLRF   25
.................... int retardo=0; 
0221:  CLRF   26
.................... int t_retardo=0; 
0222:  CLRF   27
.................... long f_retardo=0; 
0223:  CLRF   28
0224:  CLRF   29
....................  
....................  
....................  
.................... void main(){ 
*
020E:  CLRF   04
020F:  BCF    03.7
0210:  MOVLW  1F
0211:  ANDWF  03,F
0212:  BSF    03.5
0213:  BSF    1F.0
0214:  BSF    1F.1
0215:  BSF    1F.2
0216:  BCF    1F.3
0217:  MOVLW  07
0218:  MOVWF  1C
....................     
....................    setup_adc_ports(AN0_AN1_AN3); 
*
0227:  BSF    03.5
0228:  BCF    1F.0
0229:  BCF    1F.1
022A:  BSF    1F.2
022B:  BCF    1F.3
....................    setup_adc(ADC_CLOCK_DIV_32);     
022C:  BCF    1F.6
022D:  BCF    03.5
022E:  BCF    1F.6
022F:  BSF    1F.7
0230:  BSF    03.5
0231:  BCF    1F.7
0232:  BCF    03.5
0233:  BSF    1F.0
....................    lcd_init(); 
0234:  GOTO   13A
....................    setup_wdt(WDT_2304MS); 
0235:  MOVLW  0F
0236:  MOVWF  77
0237:  CLRF   01
0238:  MOVLW  81
0239:  MOVWF  04
023A:  BCF    03.7
023B:  MOVF   00,W
023C:  ANDLW  F0
023D:  IORLW  07
023E:  MOVWF  00
023F:  CLRWDT
0240:  MOVF   00,W
0241:  ANDLW  F7
0242:  BTFSC  77.3
0243:  ANDLW  F0
0244:  IORWF  77,W
0245:  MOVWF  00
....................    set_tris_c(0b11111111); 
0246:  MOVLW  FF
0247:  BSF    03.5
0248:  MOVWF  07
0249:  BCF    03.5
024A:  MOVWF  2A
....................    set_tris_b(0b11111001); 
024B:  MOVLW  F9
024C:  BSF    03.5
024D:  MOVWF  06
....................    port_b_pullups(true); 
024E:  BCF    01.7
....................    set_tris_a(0b11110001); 
024F:  MOVLW  F1
0250:  MOVWF  05
....................    printf(lcd_putc,"\fRaul "); 
0251:  BCF    03.5
0252:  CLRF   2B
0253:  MOVF   2B,W
0254:  CALL   00C
0255:  INCF   2B,F
0256:  MOVWF  77
0257:  MOVWF  2F
0258:  CALL   166
0259:  MOVLW  06
025A:  SUBWF  2B,W
025B:  BTFSS  03.2
025C:  GOTO   253
....................    printf(lcd_putc,"\nControle THC"); 
025D:  CLRF   2B
025E:  MOVF   2B,W
025F:  CALL   017
0260:  INCF   2B,F
0261:  MOVWF  77
0262:  MOVWF  2F
0263:  CALL   166
0264:  MOVLW  0D
0265:  SUBWF  2B,W
0266:  BTFSS  03.2
0267:  GOTO   25E
....................    delay_ms(300); 
0268:  MOVLW  02
0269:  MOVWF  2B
026A:  MOVLW  96
026B:  MOVWF  2C
026C:  CALL   0E9
026D:  DECFSZ 2B,F
026E:  GOTO   26A
....................    definida=read_eeprom(0); 
026F:  BSF    03.6
0270:  CLRF   0D
0271:  BSF    03.5
0272:  BCF    0C.7
0273:  BSF    0C.0
0274:  BCF    03.5
0275:  MOVF   0C,W
0276:  BCF    03.6
0277:  MOVWF  21
....................    histerese=read_eeprom(1); 
0278:  MOVLW  01
0279:  BSF    03.6
027A:  MOVWF  0D
027B:  BSF    03.5
027C:  BCF    0C.7
027D:  BSF    0C.0
027E:  BCF    03.5
027F:  MOVF   0C,W
0280:  BCF    03.6
0281:  MOVWF  20
....................    retardo=read_eeprom(2); 
0282:  MOVLW  02
0283:  BSF    03.6
0284:  MOVWF  0D
0285:  BSF    03.5
0286:  BCF    0C.7
0287:  BSF    0C.0
0288:  BCF    03.5
0289:  MOVF   0C,W
028A:  BCF    03.6
028B:  MOVWF  26
....................     
....................    while(true){ 
....................    restart_wdt(); 
028C:  CLRWDT
....................    set_adc_channel(0);    
028D:  MOVLW  00
028E:  MOVWF  78
028F:  MOVF   1F,W
0290:  ANDLW  C7
0291:  IORWF  78,W
0292:  MOVWF  1F
....................    temp=read_adc(); 
0293:  BSF    1F.2
0294:  BTFSC  1F.2
0295:  GOTO   294
0296:  MOVF   1E,W
0297:  MOVWF  24
....................    if(temp<256){ 
....................    temp=temp*1;//0.5 
....................    lida=temp; 
0298:  MOVF   24,W
0299:  MOVWF  22
....................    delay_ms(100);  
029A:  MOVLW  64
029B:  MOVWF  2C
029C:  CALL   0E9
....................    } 
....................     
....................     if((input(pin_b3)==0)&&(menu==4)){ 
029D:  BSF    03.5
029E:  BSF    06.3
029F:  BCF    03.5
02A0:  BTFSC  06.3
02A1:  GOTO   2AE
02A2:  MOVF   25,W
02A3:  SUBLW  04
02A4:  BTFSS  03.2
02A5:  GOTO   2AE
....................    menu=0; 
02A6:  CLRF   25
....................    delay_ms(1500); 
02A7:  MOVLW  06
02A8:  MOVWF  2B
02A9:  MOVLW  FA
02AA:  MOVWF  2C
02AB:  CALL   0E9
02AC:  DECFSZ 2B,F
02AD:  GOTO   2A9
....................    } 
....................     
....................    if((input(pin_b3)==0)&&(menu==3)){ 
02AE:  BSF    03.5
02AF:  BSF    06.3
02B0:  BCF    03.5
02B1:  BTFSC  06.3
02B2:  GOTO   2C0
02B3:  MOVF   25,W
02B4:  SUBLW  03
02B5:  BTFSS  03.2
02B6:  GOTO   2C0
....................    menu=4; 
02B7:  MOVLW  04
02B8:  MOVWF  25
....................    delay_ms(1500); 
02B9:  MOVLW  06
02BA:  MOVWF  2B
02BB:  MOVLW  FA
02BC:  MOVWF  2C
02BD:  CALL   0E9
02BE:  DECFSZ 2B,F
02BF:  GOTO   2BB
....................    } 
....................     if((input(pin_b3)==0)&&(menu==2)){ 
02C0:  BSF    03.5
02C1:  BSF    06.3
02C2:  BCF    03.5
02C3:  BTFSC  06.3
02C4:  GOTO   2D2
02C5:  MOVF   25,W
02C6:  SUBLW  02
02C7:  BTFSS  03.2
02C8:  GOTO   2D2
....................    menu=3; 
02C9:  MOVLW  03
02CA:  MOVWF  25
....................    delay_ms(1500); 
02CB:  MOVLW  06
02CC:  MOVWF  2B
02CD:  MOVLW  FA
02CE:  MOVWF  2C
02CF:  CALL   0E9
02D0:  DECFSZ 2B,F
02D1:  GOTO   2CD
....................    } 
....................        
....................    if((input(pin_b3)==0)&&(menu==1)){ 
02D2:  BSF    03.5
02D3:  BSF    06.3
02D4:  BCF    03.5
02D5:  BTFSC  06.3
02D6:  GOTO   2E2
02D7:  DECFSZ 25,W
02D8:  GOTO   2E2
....................    menu=2; 
02D9:  MOVLW  02
02DA:  MOVWF  25
....................    delay_ms(1500); 
02DB:  MOVLW  06
02DC:  MOVWF  2B
02DD:  MOVLW  FA
02DE:  MOVWF  2C
02DF:  CALL   0E9
02E0:  DECFSZ 2B,F
02E1:  GOTO   2DD
....................    } 
....................     
....................      if((input(pin_b3)==0)&&(menu==0)){ 
02E2:  BSF    03.5
02E3:  BSF    06.3
02E4:  BCF    03.5
02E5:  BTFSC  06.3
02E6:  GOTO   2F3
02E7:  MOVF   25,F
02E8:  BTFSS  03.2
02E9:  GOTO   2F3
....................    menu=1; 
02EA:  MOVLW  01
02EB:  MOVWF  25
....................    delay_ms(1500); 
02EC:  MOVLW  06
02ED:  MOVWF  2B
02EE:  MOVLW  FA
02EF:  MOVWF  2C
02F0:  CALL   0E9
02F1:  DECFSZ 2B,F
02F2:  GOTO   2EE
....................    } 
....................     
....................    switch (menu){ 
02F3:  MOVF   25,W
02F4:  XORLW  01
02F5:  BTFSC  03.2
02F6:  GOTO   301
02F7:  XORLW  03
02F8:  BTFSC  03.2
02F9:  GOTO   353
02FA:  XORLW  01
02FB:  BTFSC  03.2
02FC:  GOTO   386
02FD:  XORLW  07
02FE:  BTFSC  03.2
02FF:  GOTO   3F9
0300:  GOTO   458
....................       case 1: 
....................       printf(lcd_putc,"\fAjuste de tensao"); 
0301:  CLRF   2B
0302:  MOVF   2B,W
0303:  CALL   029
0304:  INCF   2B,F
0305:  MOVWF  77
0306:  MOVWF  2F
0307:  CALL   166
0308:  MOVLW  11
0309:  SUBWF  2B,W
030A:  BTFSS  03.2
030B:  GOTO   302
....................       printf(lcd_putc,"\nVoltagem:%u",definida); 
030C:  CLRF   2B
030D:  MOVF   2B,W
030E:  CALL   03F
030F:  INCF   2B,F
0310:  MOVWF  77
0311:  MOVWF  2F
0312:  CALL   166
0313:  MOVLW  0A
0314:  SUBWF  2B,W
0315:  BTFSS  03.2
0316:  GOTO   30D
0317:  MOVF   21,W
0318:  MOVWF  2D
0319:  MOVLW  1B
031A:  MOVWF  2E
031B:  CALL   1B2
....................       restart_wdt(); 
031C:  CLRWDT
....................       if((input(pin_b4)==0)&&(definida<256)){ 
031D:  BSF    03.5
031E:  BSF    06.4
031F:  BCF    03.5
0320:  BTFSC  06.4
0321:  GOTO   324
....................       definida=definida+1; 
0322:  MOVLW  01
0323:  ADDWF  21,F
....................        } 
....................         
....................        if((input(pin_b5)==0)&&(definida>1)){ 
0324:  BSF    03.5
0325:  BSF    06.5
0326:  BCF    03.5
0327:  BTFSC  06.5
0328:  GOTO   32F
0329:  MOVF   21,W
032A:  SUBLW  01
032B:  BTFSC  03.0
032C:  GOTO   32F
....................        definida=definida-1; 
032D:  MOVLW  01
032E:  SUBWF  21,F
....................        } 
....................        write_eeprom(0,definida); 
032F:  BSF    03.6
0330:  CLRF   0D
0331:  BCF    03.6
0332:  MOVF   21,W
0333:  BSF    03.6
0334:  MOVWF  0C
0335:  BSF    03.5
0336:  BCF    0C.7
0337:  BSF    0C.2
0338:  BCF    03.5
0339:  BCF    03.6
033A:  MOVF   0B,W
033B:  MOVWF  77
033C:  BCF    0B.7
033D:  BSF    03.5
033E:  BSF    03.6
033F:  MOVLW  55
0340:  MOVWF  0D
0341:  MOVLW  AA
0342:  MOVWF  0D
0343:  BSF    0C.1
0344:  BTFSC  0C.1
0345:  GOTO   344
0346:  BCF    0C.2
0347:  MOVF   77,W
0348:  BCF    03.5
0349:  BCF    03.6
034A:  IORWF  0B,F
....................        delay_ms(1000);     
034B:  MOVLW  04
034C:  MOVWF  2B
034D:  MOVLW  FA
034E:  MOVWF  2C
034F:  CALL   0E9
0350:  DECFSZ 2B,F
0351:  GOTO   34D
....................        break; 
0352:  GOTO   47B
....................        
....................        case 2: 
....................       printf(lcd_putc,"\fAjuste histerese"); 
0353:  CLRF   2B
0354:  MOVF   2B,W
0355:  CALL   050
0356:  INCF   2B,F
0357:  MOVWF  77
0358:  MOVWF  2F
0359:  CALL   166
035A:  MOVLW  11
035B:  SUBWF  2B,W
035C:  BTFSS  03.2
035D:  GOTO   354
....................       printf(lcd_putc,"\nVolts:%u",histerese); 
035E:  CLRF   2B
035F:  MOVF   2B,W
0360:  CALL   066
0361:  INCF   2B,F
0362:  MOVWF  77
0363:  MOVWF  2F
0364:  CALL   166
0365:  MOVLW  07
0366:  SUBWF  2B,W
0367:  BTFSS  03.2
0368:  GOTO   35F
0369:  MOVF   20,W
036A:  MOVWF  2D
036B:  MOVLW  1B
036C:  MOVWF  2E
036D:  CALL   1B2
....................        restart_wdt(); 
036E:  CLRWDT
....................        if((input(pin_b4)==0)&&(histerese<50)){ 
036F:  BSF    03.5
0370:  BSF    06.4
0371:  BCF    03.5
0372:  BTFSC  06.4
0373:  GOTO   37A
0374:  MOVF   20,W
0375:  SUBLW  31
0376:  BTFSS  03.0
0377:  GOTO   37A
....................        histerese=histerese+1; 
0378:  MOVLW  01
0379:  ADDWF  20,F
....................        } 
....................         
....................        if((input(pin_b5)==0)&&(histerese>1)){ 
037A:  BSF    03.5
037B:  BSF    06.5
037C:  BCF    03.5
037D:  BTFSC  06.5
037E:  GOTO   385
037F:  MOVF   20,W
0380:  SUBLW  01
0381:  BTFSC  03.0
0382:  GOTO   385
....................        histerese=histerese-1; 
0383:  MOVLW  01
0384:  SUBWF  20,F
....................        } 
....................        break; 
0385:  GOTO   47B
....................         
....................        case 3: 
....................       printf(lcd_putc,"\fTeste de saida"); 
0386:  CLRF   2B
0387:  MOVF   2B,W
0388:  CALL   074
0389:  INCF   2B,F
038A:  MOVWF  77
038B:  MOVWF  2F
038C:  CALL   166
038D:  MOVLW  0F
038E:  SUBWF  2B,W
038F:  BTFSS  03.2
0390:  GOTO   387
....................       printf(lcd_putc,"\nVolts:%u",histerese); 
0391:  CLRF   2B
0392:  MOVF   2B,W
0393:  CALL   066
0394:  INCF   2B,F
0395:  MOVWF  77
0396:  MOVWF  2F
0397:  CALL   166
0398:  MOVLW  07
0399:  SUBWF  2B,W
039A:  BTFSS  03.2
039B:  GOTO   392
039C:  MOVF   20,W
039D:  MOVWF  2D
039E:  MOVLW  1B
039F:  MOVWF  2E
03A0:  CALL   1B2
....................       
....................         
....................        while(input(pin_b5)==0){ 
03A1:  BSF    03.5
03A2:  BSF    06.5
03A3:  BCF    03.5
03A4:  BTFSC  06.5
03A5:  GOTO   3BA
....................        output_high(pin_a2); 
03A6:  BSF    03.5
03A7:  BCF    05.2
03A8:  BCF    03.5
03A9:  BSF    05.2
....................        output_low(pin_a1); 
03AA:  BSF    03.5
03AB:  BCF    05.1
03AC:  BCF    03.5
03AD:  BCF    05.1
....................        printf(lcd_putc,"\nDesce"); 
03AE:  CLRF   2B
03AF:  MOVF   2B,W
03B0:  CALL   088
03B1:  INCF   2B,F
03B2:  MOVWF  77
03B3:  MOVWF  2F
03B4:  CALL   166
03B5:  MOVLW  06
03B6:  SUBWF  2B,W
03B7:  BTFSS  03.2
03B8:  GOTO   3AF
....................         
....................        } 
03B9:  GOTO   3A1
....................        while(input(pin_b4)==0){ 
03BA:  BSF    03.5
03BB:  BSF    06.4
03BC:  BCF    03.5
03BD:  BTFSC  06.4
03BE:  GOTO   3D3
....................        output_high(pin_a1); 
03BF:  BSF    03.5
03C0:  BCF    05.1
03C1:  BCF    03.5
03C2:  BSF    05.1
....................        output_low(pin_a2); 
03C3:  BSF    03.5
03C4:  BCF    05.2
03C5:  BCF    03.5
03C6:  BCF    05.2
....................        printf(lcd_putc,"\nSobe "); 
03C7:  CLRF   2B
03C8:  MOVF   2B,W
03C9:  CALL   093
03CA:  INCF   2B,F
03CB:  MOVWF  77
03CC:  MOVWF  2F
03CD:  CALL   166
03CE:  MOVLW  06
03CF:  SUBWF  2B,W
03D0:  BTFSS  03.2
03D1:  GOTO   3C8
....................         
....................        } 
03D2:  GOTO   3BA
....................         
....................       restart_wdt();           
03D3:  CLRWDT
....................        write_eeprom(1,histerese); 
03D4:  MOVLW  01
03D5:  BSF    03.6
03D6:  MOVWF  0D
03D7:  BCF    03.6
03D8:  MOVF   20,W
03D9:  BSF    03.6
03DA:  MOVWF  0C
03DB:  BSF    03.5
03DC:  BCF    0C.7
03DD:  BSF    0C.2
03DE:  BCF    03.5
03DF:  BCF    03.6
03E0:  MOVF   0B,W
03E1:  MOVWF  77
03E2:  BCF    0B.7
03E3:  BSF    03.5
03E4:  BSF    03.6
03E5:  MOVLW  55
03E6:  MOVWF  0D
03E7:  MOVLW  AA
03E8:  MOVWF  0D
03E9:  BSF    0C.1
03EA:  BTFSC  0C.1
03EB:  GOTO   3EA
03EC:  BCF    0C.2
03ED:  MOVF   77,W
03EE:  BCF    03.5
03EF:  BCF    03.6
03F0:  IORWF  0B,F
....................        delay_ms(1000);     
03F1:  MOVLW  04
03F2:  MOVWF  2B
03F3:  MOVLW  FA
03F4:  MOVWF  2C
03F5:  CALL   0E9
03F6:  DECFSZ 2B,F
03F7:  GOTO   3F3
....................       break; 
03F8:  GOTO   47B
....................        
....................       case 4: 
....................       f_retardo=retardo*10; 
03F9:  MOVF   26,W
03FA:  MOVWF  2B
03FB:  MOVLW  0A
03FC:  MOVWF  2C
03FD:  GOTO   1E7
03FE:  CLRF   29
03FF:  MOVF   78,W
0400:  MOVWF  28
....................       printf(lcd_putc,"\fTempo de retardo"); 
0401:  CLRF   2B
0402:  MOVF   2B,W
0403:  CALL   09E
0404:  INCF   2B,F
0405:  MOVWF  77
0406:  MOVWF  2F
0407:  CALL   166
0408:  MOVLW  11
0409:  SUBWF  2B,W
040A:  BTFSS  03.2
040B:  GOTO   402
....................       printf(lcd_putc,"\nMsegundos:%u",retardo); 
040C:  CLRF   2B
040D:  MOVF   2B,W
040E:  CALL   0B4
040F:  INCF   2B,F
0410:  MOVWF  77
0411:  MOVWF  2F
0412:  CALL   166
0413:  MOVLW  0B
0414:  SUBWF  2B,W
0415:  BTFSS  03.2
0416:  GOTO   40D
0417:  MOVF   26,W
0418:  MOVWF  2D
0419:  MOVLW  1B
041A:  MOVWF  2E
041B:  CALL   1B2
....................       if((input(pin_b4)==0)&&(retardo<250)){ 
041C:  BSF    03.5
041D:  BSF    06.4
041E:  BCF    03.5
041F:  BTFSC  06.4
0420:  GOTO   427
0421:  MOVF   26,W
0422:  SUBLW  F9
0423:  BTFSS  03.0
0424:  GOTO   427
....................        retardo=retardo+20; 
0425:  MOVLW  14
0426:  ADDWF  26,F
....................        } 
....................         
....................        if((input(pin_b5)==0)&&(retardo>20)){ 
0427:  BSF    03.5
0428:  BSF    06.5
0429:  BCF    03.5
042A:  BTFSC  06.5
042B:  GOTO   432
042C:  MOVF   26,W
042D:  SUBLW  14
042E:  BTFSC  03.0
042F:  GOTO   432
....................        retardo=retardo-20; 
0430:  MOVLW  14
0431:  SUBWF  26,F
....................        } 
....................       restart_wdt();           
0432:  CLRWDT
....................       write_eeprom(2,retardo); 
0433:  MOVLW  02
0434:  BSF    03.6
0435:  MOVWF  0D
0436:  BCF    03.6
0437:  MOVF   26,W
0438:  BSF    03.6
0439:  MOVWF  0C
043A:  BSF    03.5
043B:  BCF    0C.7
043C:  BSF    0C.2
043D:  BCF    03.5
043E:  BCF    03.6
043F:  MOVF   0B,W
0440:  MOVWF  77
0441:  BCF    0B.7
0442:  BSF    03.5
0443:  BSF    03.6
0444:  MOVLW  55
0445:  MOVWF  0D
0446:  MOVLW  AA
0447:  MOVWF  0D
0448:  BSF    0C.1
0449:  BTFSC  0C.1
044A:  GOTO   449
044B:  BCF    0C.2
044C:  MOVF   77,W
044D:  BCF    03.5
044E:  BCF    03.6
044F:  IORWF  0B,F
....................       delay_ms(1000); 
0450:  MOVLW  04
0451:  MOVWF  2B
0452:  MOVLW  FA
0453:  MOVWF  2C
0454:  CALL   0E9
0455:  DECFSZ 2B,F
0456:  GOTO   452
....................       break; 
0457:  GOTO   47B
....................        
....................      default:    
....................      printf(lcd_putc,"\f(V) Definida:%u\n(V) Atual :%u",definida,lida); 
0458:  CLRF   2B
0459:  MOVF   2B,W
045A:  CALL   0C6
045B:  INCF   2B,F
045C:  MOVWF  77
045D:  MOVWF  2F
045E:  CALL   166
045F:  MOVLW  0E
0460:  SUBWF  2B,W
0461:  BTFSS  03.2
0462:  GOTO   459
0463:  MOVF   21,W
0464:  MOVWF  2D
0465:  MOVLW  1B
0466:  MOVWF  2E
0467:  CALL   1B2
0468:  MOVLW  10
0469:  MOVWF  2C
046A:  MOVF   2C,W
046B:  CALL   0C6
046C:  INCF   2C,F
046D:  MOVWF  77
046E:  MOVWF  2F
046F:  CALL   166
0470:  MOVLW  1C
0471:  SUBWF  2C,W
0472:  BTFSS  03.2
0473:  GOTO   46A
0474:  MOVF   22,W
0475:  MOVWF  2D
0476:  MOVLW  1B
0477:  MOVWF  2E
0478:  CALL   1B2
....................      menu=0; 
0479:  CLRF   25
....................      break; 
047A:  GOTO   47B
....................   } 
....................     
....................     if(lida>Vmin){ 
047B:  MOVF   22,W
047C:  SUBWF  23,W
047D:  BTFSC  03.0
047E:  GOTO   4A6
....................     t_retardo= t_retardo+58; 
047F:  MOVLW  3A
0480:  ADDWF  27,F
....................     if(t_retardo>retardo){ 
0481:  MOVF   27,W
0482:  SUBWF  26,W
0483:  BTFSC  03.0
0484:  GOTO   4A5
....................     t_retardo=retardo; 
0485:  MOVF   26,W
0486:  MOVWF  27
....................       if((lida+histerese)<definida){ 
0487:  MOVF   20,W
0488:  ADDWF  22,W
0489:  SUBWF  21,W
048A:  BTFSC  03.2
048B:  GOTO   493
048C:  BTFSS  03.0
048D:  GOTO   493
....................       output_high(pin_a2); 
048E:  BSF    03.5
048F:  BCF    05.2
0490:  BCF    03.5
0491:  BSF    05.2
....................       } else output_low(pin_a2); 
0492:  GOTO   497
0493:  BSF    03.5
0494:  BCF    05.2
0495:  BCF    03.5
0496:  BCF    05.2
....................        
....................         if((lida+histerese)>definida){ 
0497:  MOVF   20,W
0498:  ADDWF  22,W
0499:  SUBWF  21,W
049A:  BTFSC  03.0
049B:  GOTO   4A1
....................       output_high(pin_a1); 
049C:  BSF    03.5
049D:  BCF    05.1
049E:  BCF    03.5
049F:  BSF    05.1
....................       } else output_low(pin_a1); 
04A0:  GOTO   4A5
04A1:  BSF    03.5
04A2:  BCF    05.1
04A3:  BCF    03.5
04A4:  BCF    05.1
....................     } 
....................     } 
....................     else { 
04A5:  GOTO   4AF
....................     t_retardo=0; 
04A6:  CLRF   27
....................     output_low(pin_a2); 
04A7:  BSF    03.5
04A8:  BCF    05.2
04A9:  BCF    03.5
04AA:  BCF    05.2
....................     output_low(pin_a1); 
04AB:  BSF    03.5
04AC:  BCF    05.1
04AD:  BCF    03.5
04AE:  BCF    05.1
....................     } 
....................      
....................    delay_ms(200); 
04AF:  MOVLW  C8
04B0:  MOVWF  2C
04B1:  CALL   0E9
....................      
....................    } 
04B2:  GOTO   28C
....................     
.................... } 
....................  
....................  
04B3:  SLEEP

Configuration Fuses:
   Word  1: 3F76   HS WDT PUT NODEBUG NOPROTECT BROWNOUT NOLVP NOCPD NOWRT

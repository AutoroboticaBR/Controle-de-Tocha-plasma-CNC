CCS PCM C Compiler, Version 4.074, 38112               15-dez-17 19:53

               Filename: C:\Users\Raulstar\Google Drive\THC\THC 7.lst

               ROM used: 1445 words (18%)
                         Largest free fragment is 2048
               RAM used: 38 (10%) at main() level
                         54 (15%) worst case
               Stack:    4 locations

*
0000:  MOVLW  00
0001:  MOVWF  0A
0002:  GOTO   26E
0003:  NOP
.................... #include <16f877a.h> 
.................... //////// Standard Header file for the PIC16F877A device //////////////// 
.................... #device PIC16F877A 
.................... #list 
....................  
.................... #use delay(clock=1000000,RESTART_WDT) 
*
00F2:  MOVLW  3D
00F3:  MOVWF  04
00F4:  BCF    03.7
00F5:  MOVF   00,W
00F6:  BTFSC  03.2
00F7:  GOTO   100
00F8:  MOVLW  51
00F9:  MOVWF  77
00FA:  DECFSZ 77,F
00FB:  GOTO   0FA
00FC:  GOTO   0FD
00FD:  CLRWDT
00FE:  DECFSZ 00,F
00FF:  GOTO   0F8
0100:  RETLW  00
.................... #fuses hs 
.................... #FUSES PUT    
.................... #include <lcd.c> 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////                             LCDD.C                                //// 
.................... ////                 Driver for common LCD modules                     //// 
.................... ////                                                                   //// 
.................... ////  lcd_init()   Must be called before any other function.           //// 
.................... ////                                                                   //// 
.................... ////  lcd_putc(c)  Will display c on the next position of the LCD.     //// 
.................... ////                     The following have special meaning:           //// 
.................... ////                      \f  Clear display                            //// 
.................... ////                      \n  Go to start of second line               //// 
.................... ////                      \b  Move back one position                   //// 
.................... ////                                                                   //// 
.................... ////  lcd_gotoxy(x,y) Set write position on LCD (upper left is 1,1)    //// 
.................... ////                                                                   //// 
.................... ////  lcd_getc(x,y)   Returns character at position x,y on LCD         //// 
.................... ////                                                                   //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2007 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... // As defined in the following structure the pin connection is as follows: 
.................... //     D0  enable 
.................... //     D1  rs 
.................... //     D2  rw 
.................... //     D4  D4 
.................... //     D5  D5 
.................... //     D6  D6 
.................... //     D7  D7 
.................... // 
.................... //   LCD pins D0-D3 are not used and PIC D3 is not used. 
....................  
.................... // Un-comment the following define to use port B 
.................... // #define use_portb_lcd TRUE 
....................  
....................  
.................... struct lcd_pin_map {                 // This structure is overlayed 
....................            BOOLEAN enable;           // on to an I/O port to gain 
....................            BOOLEAN rs;               // access to the LCD pins. 
....................            BOOLEAN rw;               // The bits are allocated from 
....................            BOOLEAN unused;           // low order up.  ENABLE will 
....................            int     data : 4;         // be pin B0. 
....................         } lcd; 
....................  
....................  
.................... #if defined use_portb_lcd 
....................    //#locate lcd = getenv("sfr:PORTB")    // This puts the entire structure over the port 
....................    #ifdef __pch__ 
....................     #locate lcd = 0xf81 
....................    #else 
....................     #locate lcd = 6 
....................    #endif 
....................    #define set_tris_lcd(x) set_tris_b(x) 
.................... #else 
....................    //#locate lcd = getenv("sfr:PORTD")    // This puts the entire structure over the port 
....................    #ifdef __pch__ 
....................     #locate lcd = 0xf83 
....................    #else 
....................     #locate lcd = 8 
....................    #endif 
....................    #define set_tris_lcd(x) set_tris_d(x) 
.................... #endif 
....................  
.................... #ifndef lcd_type 
.................... #define lcd_type 2           // 0=5x7, 1=5x10, 2=2 lines 
.................... #endif 
....................  
.................... #define lcd_line_two 0x40    // LCD RAM address for the second line 
....................  
....................  
.................... BYTE const LCD_INIT_STRING[4] = {0x20 | (lcd_type << 2), 0xc, 1, 6}; 
....................                              // These bytes need to be sent to the LCD 
....................                              // to start it up. 
....................  
....................  
....................                              // The following are used for setting 
....................                              // the I/O port direction register. 
....................  
.................... struct lcd_pin_map const LCD_WRITE = {0,0,0,0,0}; // For write mode all pins are out 
.................... struct lcd_pin_map const LCD_READ = {0,0,0,0,15}; // For read mode data pins are in 
....................  
....................  
....................  
.................... BYTE lcd_read_byte() { 
....................       BYTE low,high; 
....................       set_tris_lcd(LCD_READ); 
*
010E:  MOVLW  F0
010F:  BSF    03.5
0110:  MOVWF  08
....................       lcd.rw = 1; 
0111:  BCF    03.5
0112:  BSF    08.2
....................       delay_cycles(1); 
0113:  NOP
....................       lcd.enable = 1; 
0114:  BSF    08.0
....................       delay_cycles(1); 
0115:  NOP
....................       high = lcd.data; 
0116:  MOVF   08,W
0117:  SWAPF  08,W
0118:  ANDLW  0F
0119:  MOVWF  4E
....................       lcd.enable = 0; 
011A:  BCF    08.0
....................       delay_cycles(1); 
011B:  NOP
....................       lcd.enable = 1; 
011C:  BSF    08.0
....................       delay_us(1); 
011D:  CLRWDT
....................       low = lcd.data; 
011E:  MOVF   08,W
011F:  SWAPF  08,W
0120:  ANDLW  0F
0121:  MOVWF  4D
....................       lcd.enable = 0; 
0122:  BCF    08.0
....................       set_tris_lcd(LCD_WRITE); 
0123:  MOVLW  00
0124:  BSF    03.5
0125:  MOVWF  08
....................       return( (high<<4) | low); 
0126:  BCF    03.5
0127:  SWAPF  4E,W
0128:  MOVWF  77
0129:  MOVLW  F0
012A:  ANDWF  77,F
012B:  MOVF   77,W
012C:  IORWF  4D,W
012D:  MOVWF  78
.................... } 
....................  
....................  
.................... void lcd_send_nibble( BYTE n ) { 
....................       lcd.data = n; 
*
0101:  SWAPF  4E,W
0102:  ANDLW  F0
0103:  MOVWF  77
0104:  MOVLW  0F
0105:  ANDWF  08,W
0106:  IORWF  77,W
0107:  MOVWF  08
....................       delay_cycles(1); 
0108:  NOP
....................       lcd.enable = 1; 
0109:  BSF    08.0
....................       delay_us(2); 
010A:  CLRWDT
....................       lcd.enable = 0; 
010B:  BCF    08.0
.................... } 
010C:  RETLW  00
....................  
....................  
.................... void lcd_send_byte( BYTE address, BYTE n ) { 
....................  
....................       lcd.rs = 0; 
010D:  BCF    08.1
....................       while ( bit_test(lcd_read_byte(),7) ) ; 
*
012E:  MOVF   78,W
012F:  MOVWF  4D
0130:  BTFSC  4D.7
0131:  GOTO   10E
....................       lcd.rs = address; 
0132:  BTFSS  4B.0
0133:  BCF    08.1
0134:  BTFSC  4B.0
0135:  BSF    08.1
....................       delay_cycles(1); 
0136:  NOP
....................       lcd.rw = 0; 
0137:  BCF    08.2
....................       delay_cycles(1); 
0138:  NOP
....................       lcd.enable = 0; 
0139:  BCF    08.0
....................       lcd_send_nibble(n >> 4); 
013A:  SWAPF  4C,W
013B:  MOVWF  4D
013C:  MOVLW  0F
013D:  ANDWF  4D,F
013E:  MOVF   4D,W
013F:  MOVWF  4E
0140:  CALL   101
....................       lcd_send_nibble(n & 0xf); 
0141:  MOVF   4C,W
0142:  ANDLW  0F
0143:  MOVWF  4D
0144:  MOVWF  4E
0145:  CALL   101
.................... } 
0146:  RETLW  00
....................  
....................  
.................... void lcd_init() { 
....................     BYTE i; 
....................     set_tris_lcd(LCD_WRITE); 
0147:  MOVLW  00
0148:  BSF    03.5
0149:  MOVWF  08
....................     lcd.rs = 0; 
014A:  BCF    03.5
014B:  BCF    08.1
....................     lcd.rw = 0; 
014C:  BCF    08.2
....................     lcd.enable = 0; 
014D:  BCF    08.0
....................     delay_ms(15); 
014E:  MOVLW  0F
014F:  MOVWF  3D
0150:  CALL   0F2
....................     for(i=1;i<=3;++i) { 
0151:  MOVLW  01
0152:  MOVWF  3C
0153:  MOVF   3C,W
0154:  SUBLW  03
0155:  BTFSS  03.0
0156:  GOTO   15F
....................        lcd_send_nibble(3); 
0157:  MOVLW  03
0158:  MOVWF  4E
0159:  CALL   101
....................        delay_ms(5); 
015A:  MOVLW  05
015B:  MOVWF  3D
015C:  CALL   0F2
....................     } 
015D:  INCF   3C,F
015E:  GOTO   153
....................     lcd_send_nibble(2); 
015F:  MOVLW  02
0160:  MOVWF  4E
0161:  CALL   101
....................     for(i=0;i<=3;++i) 
0162:  CLRF   3C
0163:  MOVF   3C,W
0164:  SUBLW  03
0165:  BTFSS  03.0
0166:  GOTO   170
....................        lcd_send_byte(0,LCD_INIT_STRING[i]); 
0167:  MOVF   3C,W
0168:  CALL   004
0169:  MOVWF  3D
016A:  CLRF   4B
016B:  MOVF   3D,W
016C:  MOVWF  4C
016D:  CALL   10D
016E:  INCF   3C,F
016F:  GOTO   163
.................... } 
0170:  BCF    0A.3
0171:  BCF    0A.4
0172:  GOTO   29C (RETURN)
....................  
....................  
.................... void lcd_gotoxy( BYTE x, BYTE y) { 
....................    BYTE address; 
....................  
....................    if(y!=1) 
*
018C:  DECFSZ 48,W
018D:  GOTO   18F
018E:  GOTO   192
....................      address=lcd_line_two; 
018F:  MOVLW  40
0190:  MOVWF  49
....................    else 
0191:  GOTO   193
....................      address=0; 
0192:  CLRF   49
....................    address+=x-1; 
0193:  MOVLW  01
0194:  SUBWF  47,W
0195:  ADDWF  49,F
....................    lcd_send_byte(0,0x80|address); 
0196:  MOVF   49,W
0197:  IORLW  80
0198:  MOVWF  4A
0199:  CLRF   4B
019A:  MOVF   4A,W
019B:  MOVWF  4C
019C:  CALL   10D
.................... } 
....................  
.................... void lcd_putc( char c) { 
....................    switch (c) { 
*
0173:  MOVF   46,W
0174:  XORLW  0C
0175:  BTFSC  03.2
0176:  GOTO   17E
0177:  XORLW  06
0178:  BTFSC  03.2
0179:  GOTO   188
017A:  XORLW  02
017B:  BTFSC  03.2
017C:  GOTO   19E
017D:  GOTO   1A3
....................      case '\f'   : lcd_send_byte(0,1); 
017E:  CLRF   4B
017F:  MOVLW  01
0180:  MOVWF  4C
0181:  CALL   10D
....................                    delay_ms(2); 
0182:  MOVLW  A6
0183:  MOVWF  77
0184:  DECFSZ 77,F
0185:  GOTO   184
0186:  NOP
....................                                            break; 
0187:  GOTO   1A9
....................      case '\n'   : lcd_gotoxy(1,2);        break; 
0188:  MOVLW  01
0189:  MOVWF  47
018A:  MOVLW  02
018B:  MOVWF  48
*
019D:  GOTO   1A9
....................      case '\b'   : lcd_send_byte(0,0x10);  break; 
019E:  CLRF   4B
019F:  MOVLW  10
01A0:  MOVWF  4C
01A1:  CALL   10D
01A2:  GOTO   1A9
....................      default     : lcd_send_byte(1,c);     break; 
01A3:  MOVLW  01
01A4:  MOVWF  4B
01A5:  MOVF   46,W
01A6:  MOVWF  4C
01A7:  CALL   10D
01A8:  GOTO   1A9
....................    } 
.................... } 
01A9:  RETLW  00
....................  
.................... char lcd_getc( BYTE x, BYTE y) { 
....................    char value; 
....................  
....................     lcd_gotoxy(x,y); 
....................     while ( bit_test(lcd_read_byte(),7) ); // wait until busy flag is low 
....................     lcd.rs=1; 
....................     value = lcd_read_byte(); 
....................     lcd.rs=0; 
....................     return(value); 
.................... } 
....................  
.................... #FUSES WDT 
....................  
.................... #define n 8 
....................  
.................... unsigned long leitura=0; 
*
0279:  BCF    03.5
027A:  CLRF   20
027B:  CLRF   21
.................... long int fitrado; 
.................... int valores[n]; 
....................  
.................... int i=0; 
027C:  CLRF   2C
.................... long int soma=0; 
027D:  CLRF   2D
027E:  CLRF   2E
....................  
.................... int histerese=5; 
027F:  MOVLW  05
0280:  MOVWF  2F
.................... int definida; 
.................... int lida=0; 
0281:  CLRF   31
.................... Int Vmin=25; 
0282:  MOVLW  19
0283:  MOVWF  32
.................... int temp=0; 
0284:  CLRF   33
.................... int menu=0; 
0285:  CLRF   34
.................... int retardo=0; 
0286:  CLRF   35
.................... int t_retardo=0; 
0287:  CLRF   36
.................... long int f_retardo=0; 
0288:  CLRF   37
0289:  CLRF   38
.................... long int c_retardo=0; 
028A:  CLRF   39
028B:  CLRF   3A
....................  
....................  
....................  
.................... void main(){ 
*
026E:  CLRF   04
026F:  BCF    03.7
0270:  MOVLW  1F
0271:  ANDWF  03,F
0272:  BSF    03.5
0273:  BSF    1F.0
0274:  BSF    1F.1
0275:  BSF    1F.2
0276:  BCF    1F.3
0277:  MOVLW  07
0278:  MOVWF  1C
....................     
....................    setup_adc_ports(AN0_AN1_AN3); 
*
028E:  BSF    03.5
028F:  BCF    1F.0
0290:  BCF    1F.1
0291:  BSF    1F.2
0292:  BCF    1F.3
....................    setup_adc(ADC_CLOCK_DIV_32);     
0293:  BCF    1F.6
0294:  BCF    03.5
0295:  BCF    1F.6
0296:  BSF    1F.7
0297:  BSF    03.5
0298:  BCF    1F.7
0299:  BCF    03.5
029A:  BSF    1F.0
....................    lcd_init(); 
029B:  GOTO   147
....................    setup_wdt(WDT_288MS); 
029C:  MOVLW  0C
029D:  MOVWF  77
029E:  CLRF   01
029F:  MOVLW  81
02A0:  MOVWF  04
02A1:  BCF    03.7
02A2:  MOVF   00,W
02A3:  ANDLW  F0
02A4:  IORLW  07
02A5:  MOVWF  00
02A6:  CLRWDT
02A7:  MOVF   00,W
02A8:  ANDLW  F7
02A9:  BTFSC  77.3
02AA:  ANDLW  F0
02AB:  IORWF  77,W
02AC:  MOVWF  00
....................    set_tris_c(0b11111111); 
02AD:  MOVLW  FF
02AE:  BSF    03.5
02AF:  MOVWF  07
02B0:  BCF    03.5
02B1:  MOVWF  3B
....................    set_tris_b(0b11111001); 
02B2:  MOVLW  F9
02B3:  BSF    03.5
02B4:  MOVWF  06
....................    port_b_pullups(true); 
02B5:  BCF    01.7
....................    set_tris_a(0b11110001); 
02B6:  MOVLW  F1
02B7:  MOVWF  05
....................    printf(lcd_putc,"\fAutorobotica "); 
02B8:  BCF    03.5
02B9:  CLRF   3C
02BA:  MOVF   3C,W
02BB:  CALL   00C
02BC:  INCF   3C,F
02BD:  MOVWF  77
02BE:  MOVWF  46
02BF:  CALL   173
02C0:  MOVLW  0E
02C1:  SUBWF  3C,W
02C2:  BTFSS  03.2
02C3:  GOTO   2BA
....................    printf(lcd_putc,"\nControle THC"); 
02C4:  CLRF   3C
02C5:  MOVF   3C,W
02C6:  CALL   01F
02C7:  INCF   3C,F
02C8:  MOVWF  77
02C9:  MOVWF  46
02CA:  CALL   173
02CB:  MOVLW  0D
02CC:  SUBWF  3C,W
02CD:  BTFSS  03.2
02CE:  GOTO   2C5
....................    delay_ms(3000); 
02CF:  MOVLW  0C
02D0:  MOVWF  3C
02D1:  MOVLW  FA
02D2:  MOVWF  3D
02D3:  CALL   0F2
02D4:  DECFSZ 3C,F
02D5:  GOTO   2D1
....................    delay_ms(3000); 
02D6:  MOVLW  0C
02D7:  MOVWF  3C
02D8:  MOVLW  FA
02D9:  MOVWF  3D
02DA:  CALL   0F2
02DB:  DECFSZ 3C,F
02DC:  GOTO   2D8
....................    definida=read_eeprom(0); 
02DD:  BSF    03.6
02DE:  CLRF   0D
02DF:  BSF    03.5
02E0:  BCF    0C.7
02E1:  BSF    0C.0
02E2:  BCF    03.5
02E3:  MOVF   0C,W
02E4:  BCF    03.6
02E5:  MOVWF  30
....................    histerese=read_eeprom(1); 
02E6:  MOVLW  01
02E7:  BSF    03.6
02E8:  MOVWF  0D
02E9:  BSF    03.5
02EA:  BCF    0C.7
02EB:  BSF    0C.0
02EC:  BCF    03.5
02ED:  MOVF   0C,W
02EE:  BCF    03.6
02EF:  MOVWF  2F
....................    retardo=read_eeprom(2); 
02F0:  MOVLW  02
02F1:  BSF    03.6
02F2:  MOVWF  0D
02F3:  BSF    03.5
02F4:  BCF    0C.7
02F5:  BSF    0C.0
02F6:  BCF    03.5
02F7:  MOVF   0C,W
02F8:  BCF    03.6
02F9:  MOVWF  35
....................    f_retardo=make16(0,retardo); 
02FA:  CLRF   38
02FB:  MOVF   35,W
02FC:  MOVWF  37
....................    delay_us(30); 
02FD:  CLRWDT
02FE:  GOTO   2FF
02FF:  GOTO   300
0300:  GOTO   301
....................     
....................    while(true){ 
....................    restart_wdt(); 
0301:  CLRWDT
....................    set_adc_channel(0);    
0302:  MOVLW  00
0303:  MOVWF  78
0304:  MOVF   1F,W
0305:  ANDLW  C7
0306:  IORWF  78,W
0307:  MOVWF  1F
....................    temp=read_adc(); 
0308:  BSF    1F.2
0309:  BTFSC  1F.2
030A:  GOTO   309
030B:  MOVF   1E,W
030C:  MOVWF  33
....................    
....................    temp=temp*1;//0.5 
....................    leitura=temp; 
030D:  CLRF   21
030E:  MOVF   33,W
030F:  MOVWF  20
....................    for(i=(n-1); i>0; i--) { 
0310:  MOVLW  07
0311:  MOVWF  2C
0312:  MOVF   2C,F
0313:  BTFSC  03.2
0314:  GOTO   32B
....................       valores[i]=valores[i-1]; 
0315:  MOVLW  24
0316:  ADDWF  2C,W
0317:  MOVWF  78
0318:  CLRF   7A
0319:  BTFSC  03.0
031A:  INCF   7A,F
031B:  MOVLW  01
031C:  SUBWF  2C,W
031D:  ADDLW  24
031E:  MOVWF  04
031F:  BCF    03.7
0320:  MOVF   00,W
0321:  MOVWF  3F
0322:  MOVF   78,W
0323:  MOVWF  04
0324:  BCF    03.7
0325:  BTFSC  7A.0
0326:  BSF    03.7
0327:  MOVF   3F,W
0328:  MOVWF  00
....................       } 
0329:  DECF   2C,F
032A:  GOTO   312
....................       soma=0; 
032B:  CLRF   2E
032C:  CLRF   2D
....................    valores[0]=leitura; 
032D:  MOVF   20,W
032E:  MOVWF  24
....................  
....................       for(i=0;i<n;i++){ 
032F:  CLRF   2C
0330:  MOVF   2C,W
0331:  SUBLW  07
0332:  BTFSS  03.0
0333:  GOTO   33E
....................       soma+=valores[i]; 
0334:  MOVLW  24
0335:  ADDWF  2C,W
0336:  MOVWF  04
0337:  BCF    03.7
0338:  MOVF   00,W
0339:  ADDWF  2D,F
033A:  BTFSC  03.0
033B:  INCF   2E,F
....................       } 
033C:  INCF   2C,F
033D:  GOTO   330
.................... lida =soma/n; 
033E:  RRF    2E,W
033F:  MOVWF  7A
0340:  RRF    2D,W
0341:  MOVWF  79
0342:  RRF    7A,F
0343:  RRF    79,F
0344:  RRF    7A,F
0345:  RRF    79,F
0346:  MOVF   79,W
0347:  MOVWF  31
....................  
....................  
....................     if((input(pin_b3)==0)&&(menu==4)){ 
0348:  BSF    03.5
0349:  BSF    06.3
034A:  BCF    03.5
034B:  BTFSC  06.3
034C:  GOTO   359
034D:  MOVF   34,W
034E:  SUBLW  04
034F:  BTFSS  03.2
0350:  GOTO   359
....................    menu=0; 
0351:  CLRF   34
....................    delay_ms(1500); 
0352:  MOVLW  06
0353:  MOVWF  3C
0354:  MOVLW  FA
0355:  MOVWF  3D
0356:  CALL   0F2
0357:  DECFSZ 3C,F
0358:  GOTO   354
....................    } 
....................     
....................    if((input(pin_b3)==0)&&(menu==3)){ 
0359:  BSF    03.5
035A:  BSF    06.3
035B:  BCF    03.5
035C:  BTFSC  06.3
035D:  GOTO   36B
035E:  MOVF   34,W
035F:  SUBLW  03
0360:  BTFSS  03.2
0361:  GOTO   36B
....................    menu=4; 
0362:  MOVLW  04
0363:  MOVWF  34
....................    delay_ms(1500); 
0364:  MOVLW  06
0365:  MOVWF  3C
0366:  MOVLW  FA
0367:  MOVWF  3D
0368:  CALL   0F2
0369:  DECFSZ 3C,F
036A:  GOTO   366
....................    } 
....................     if((input(pin_b3)==0)&&(menu==2)){ 
036B:  BSF    03.5
036C:  BSF    06.3
036D:  BCF    03.5
036E:  BTFSC  06.3
036F:  GOTO   37D
0370:  MOVF   34,W
0371:  SUBLW  02
0372:  BTFSS  03.2
0373:  GOTO   37D
....................    menu=3; 
0374:  MOVLW  03
0375:  MOVWF  34
....................    delay_ms(1500); 
0376:  MOVLW  06
0377:  MOVWF  3C
0378:  MOVLW  FA
0379:  MOVWF  3D
037A:  CALL   0F2
037B:  DECFSZ 3C,F
037C:  GOTO   378
....................    } 
....................        
....................    if((input(pin_b3)==0)&&(menu==1)){ 
037D:  BSF    03.5
037E:  BSF    06.3
037F:  BCF    03.5
0380:  BTFSC  06.3
0381:  GOTO   38D
0382:  DECFSZ 34,W
0383:  GOTO   38D
....................    menu=2; 
0384:  MOVLW  02
0385:  MOVWF  34
....................    delay_ms(1500); 
0386:  MOVLW  06
0387:  MOVWF  3C
0388:  MOVLW  FA
0389:  MOVWF  3D
038A:  CALL   0F2
038B:  DECFSZ 3C,F
038C:  GOTO   388
....................    } 
....................     
....................      if((input(pin_b3)==0)&&(menu==0)){ 
038D:  BSF    03.5
038E:  BSF    06.3
038F:  BCF    03.5
0390:  BTFSC  06.3
0391:  GOTO   39E
0392:  MOVF   34,F
0393:  BTFSS  03.2
0394:  GOTO   39E
....................    menu=1; 
0395:  MOVLW  01
0396:  MOVWF  34
....................    delay_ms(1500); 
0397:  MOVLW  06
0398:  MOVWF  3C
0399:  MOVLW  FA
039A:  MOVWF  3D
039B:  CALL   0F2
039C:  DECFSZ 3C,F
039D:  GOTO   399
....................    } 
....................     
....................    switch (menu){ 
039E:  MOVF   34,W
039F:  XORLW  01
03A0:  BTFSC  03.2
03A1:  GOTO   3AC
03A2:  XORLW  03
03A3:  BTFSC  03.2
03A4:  GOTO   3FE
03A5:  XORLW  01
03A6:  BTFSC  03.2
03A7:  GOTO   43F
03A8:  XORLW  07
03A9:  BTFSC  03.2
03AA:  GOTO   4B2
03AB:  GOTO   527
....................       case 1: 
....................       printf(lcd_putc,"\fAjuste de tensao"); 
03AC:  CLRF   3C
03AD:  MOVF   3C,W
03AE:  CALL   031
03AF:  INCF   3C,F
03B0:  MOVWF  77
03B1:  MOVWF  46
03B2:  CALL   173
03B3:  MOVLW  11
03B4:  SUBWF  3C,W
03B5:  BTFSS  03.2
03B6:  GOTO   3AD
....................       printf(lcd_putc,"\nVoltagem:%u",definida); 
03B7:  CLRF   3C
03B8:  MOVF   3C,W
03B9:  CALL   047
03BA:  INCF   3C,F
03BB:  MOVWF  77
03BC:  MOVWF  46
03BD:  CALL   173
03BE:  MOVLW  0A
03BF:  SUBWF  3C,W
03C0:  BTFSS  03.2
03C1:  GOTO   3B8
03C2:  MOVF   30,W
03C3:  MOVWF  3E
03C4:  MOVLW  1B
03C5:  MOVWF  3F
03C6:  CALL   1BF
....................       restart_wdt(); 
03C7:  CLRWDT
....................       if((input(pin_b4)==0)&&(definida<256)){ 
03C8:  BSF    03.5
03C9:  BSF    06.4
03CA:  BCF    03.5
03CB:  BTFSC  06.4
03CC:  GOTO   3CF
....................       definida=definida+1; 
03CD:  MOVLW  01
03CE:  ADDWF  30,F
....................        } 
....................         
....................        if((input(pin_b5)==0)&&(definida>1)){ 
03CF:  BSF    03.5
03D0:  BSF    06.5
03D1:  BCF    03.5
03D2:  BTFSC  06.5
03D3:  GOTO   3DA
03D4:  MOVF   30,W
03D5:  SUBLW  01
03D6:  BTFSC  03.0
03D7:  GOTO   3DA
....................        definida=definida-1; 
03D8:  MOVLW  01
03D9:  SUBWF  30,F
....................        } 
....................        write_eeprom(0,definida); 
03DA:  BSF    03.6
03DB:  CLRF   0D
03DC:  BCF    03.6
03DD:  MOVF   30,W
03DE:  BSF    03.6
03DF:  MOVWF  0C
03E0:  BSF    03.5
03E1:  BCF    0C.7
03E2:  BSF    0C.2
03E3:  BCF    03.5
03E4:  BCF    03.6
03E5:  MOVF   0B,W
03E6:  MOVWF  77
03E7:  BCF    0B.7
03E8:  BSF    03.5
03E9:  BSF    03.6
03EA:  MOVLW  55
03EB:  MOVWF  0D
03EC:  MOVLW  AA
03ED:  MOVWF  0D
03EE:  BSF    0C.1
03EF:  BTFSC  0C.1
03F0:  GOTO   3EF
03F1:  BCF    0C.2
03F2:  MOVF   77,W
03F3:  BCF    03.5
03F4:  BCF    03.6
03F5:  IORWF  0B,F
....................        delay_ms(1000);     
03F6:  MOVLW  04
03F7:  MOVWF  3C
03F8:  MOVLW  FA
03F9:  MOVWF  3D
03FA:  CALL   0F2
03FB:  DECFSZ 3C,F
03FC:  GOTO   3F8
....................        break; 
03FD:  GOTO   54A
....................        
....................        case 2: 
....................       printf(lcd_putc,"\fAjuste histerese"); 
03FE:  CLRF   3C
03FF:  MOVF   3C,W
0400:  CALL   058
0401:  INCF   3C,F
0402:  MOVWF  77
0403:  MOVWF  46
0404:  CALL   173
0405:  MOVLW  11
0406:  SUBWF  3C,W
0407:  BTFSS  03.2
0408:  GOTO   3FF
....................       printf(lcd_putc,"\nVolts:%u",histerese); 
0409:  CLRF   3C
040A:  MOVF   3C,W
040B:  CALL   06E
040C:  INCF   3C,F
040D:  MOVWF  77
040E:  MOVWF  46
040F:  CALL   173
0410:  MOVLW  07
0411:  SUBWF  3C,W
0412:  BTFSS  03.2
0413:  GOTO   40A
0414:  MOVF   2F,W
0415:  MOVWF  3E
0416:  MOVLW  1B
0417:  MOVWF  3F
0418:  CALL   1BF
....................        restart_wdt(); 
0419:  CLRWDT
....................         
....................        if((input(pin_b4)==0)&&(histerese<50)){ 
041A:  BSF    03.5
041B:  BSF    06.4
041C:  BCF    03.5
041D:  BTFSC  06.4
041E:  GOTO   42C
041F:  MOVF   2F,W
0420:  SUBLW  31
0421:  BTFSS  03.0
0422:  GOTO   42C
....................        histerese=histerese+1; 
0423:  MOVLW  01
0424:  ADDWF  2F,F
....................         delay_ms(1000);   
0425:  MOVLW  04
0426:  MOVWF  3C
0427:  MOVLW  FA
0428:  MOVWF  3D
0429:  CALL   0F2
042A:  DECFSZ 3C,F
042B:  GOTO   427
....................        } 
....................         
....................        if((input(pin_b5)==0)&&(histerese>1)){ 
042C:  BSF    03.5
042D:  BSF    06.5
042E:  BCF    03.5
042F:  BTFSC  06.5
0430:  GOTO   43E
0431:  MOVF   2F,W
0432:  SUBLW  01
0433:  BTFSC  03.0
0434:  GOTO   43E
....................        histerese=histerese-1; 
0435:  MOVLW  01
0436:  SUBWF  2F,F
....................        delay_ms(1000);  
0437:  MOVLW  04
0438:  MOVWF  3C
0439:  MOVLW  FA
043A:  MOVWF  3D
043B:  CALL   0F2
043C:  DECFSZ 3C,F
043D:  GOTO   439
....................        } 
....................          
....................        break; 
043E:  GOTO   54A
....................         
....................        case 3: 
....................       printf(lcd_putc,"\fTeste de saida"); 
043F:  CLRF   3C
0440:  MOVF   3C,W
0441:  CALL   07C
0442:  INCF   3C,F
0443:  MOVWF  77
0444:  MOVWF  46
0445:  CALL   173
0446:  MOVLW  0F
0447:  SUBWF  3C,W
0448:  BTFSS  03.2
0449:  GOTO   440
....................       printf(lcd_putc,"\nVolts:%u",histerese); 
044A:  CLRF   3C
044B:  MOVF   3C,W
044C:  CALL   06E
044D:  INCF   3C,F
044E:  MOVWF  77
044F:  MOVWF  46
0450:  CALL   173
0451:  MOVLW  07
0452:  SUBWF  3C,W
0453:  BTFSS  03.2
0454:  GOTO   44B
0455:  MOVF   2F,W
0456:  MOVWF  3E
0457:  MOVLW  1B
0458:  MOVWF  3F
0459:  CALL   1BF
....................       
....................         
....................        while(input(pin_b5)==0){ 
045A:  BSF    03.5
045B:  BSF    06.5
045C:  BCF    03.5
045D:  BTFSC  06.5
045E:  GOTO   473
....................        output_high(pin_a2); 
045F:  BSF    03.5
0460:  BCF    05.2
0461:  BCF    03.5
0462:  BSF    05.2
....................        output_low(pin_a1); 
0463:  BSF    03.5
0464:  BCF    05.1
0465:  BCF    03.5
0466:  BCF    05.1
....................        printf(lcd_putc,"\nDesce"); 
0467:  CLRF   3C
0468:  MOVF   3C,W
0469:  CALL   090
046A:  INCF   3C,F
046B:  MOVWF  77
046C:  MOVWF  46
046D:  CALL   173
046E:  MOVLW  06
046F:  SUBWF  3C,W
0470:  BTFSS  03.2
0471:  GOTO   468
....................         
....................        } 
0472:  GOTO   45A
....................        while(input(pin_b4)==0){ 
0473:  BSF    03.5
0474:  BSF    06.4
0475:  BCF    03.5
0476:  BTFSC  06.4
0477:  GOTO   48C
....................        output_high(pin_a1); 
0478:  BSF    03.5
0479:  BCF    05.1
047A:  BCF    03.5
047B:  BSF    05.1
....................        output_low(pin_a2); 
047C:  BSF    03.5
047D:  BCF    05.2
047E:  BCF    03.5
047F:  BCF    05.2
....................        printf(lcd_putc,"\nSobe "); 
0480:  CLRF   3C
0481:  MOVF   3C,W
0482:  CALL   09B
0483:  INCF   3C,F
0484:  MOVWF  77
0485:  MOVWF  46
0486:  CALL   173
0487:  MOVLW  06
0488:  SUBWF  3C,W
0489:  BTFSS  03.2
048A:  GOTO   481
....................         
....................        } 
048B:  GOTO   473
....................         
....................       restart_wdt();           
048C:  CLRWDT
....................        write_eeprom(1,histerese); 
048D:  MOVLW  01
048E:  BSF    03.6
048F:  MOVWF  0D
0490:  BCF    03.6
0491:  MOVF   2F,W
0492:  BSF    03.6
0493:  MOVWF  0C
0494:  BSF    03.5
0495:  BCF    0C.7
0496:  BSF    0C.2
0497:  BCF    03.5
0498:  BCF    03.6
0499:  MOVF   0B,W
049A:  MOVWF  77
049B:  BCF    0B.7
049C:  BSF    03.5
049D:  BSF    03.6
049E:  MOVLW  55
049F:  MOVWF  0D
04A0:  MOVLW  AA
04A1:  MOVWF  0D
04A2:  BSF    0C.1
04A3:  BTFSC  0C.1
04A4:  GOTO   4A3
04A5:  BCF    0C.2
04A6:  MOVF   77,W
04A7:  BCF    03.5
04A8:  BCF    03.6
04A9:  IORWF  0B,F
....................        delay_ms(1000);     
04AA:  MOVLW  04
04AB:  MOVWF  3C
04AC:  MOVLW  FA
04AD:  MOVWF  3D
04AE:  CALL   0F2
04AF:  DECFSZ 3C,F
04B0:  GOTO   4AC
....................       break; 
04B1:  GOTO   54A
....................        
....................       case 4: 
....................       printf(lcd_putc,"\fTempo de retardo"); 
04B2:  CLRF   3C
04B3:  MOVF   3C,W
04B4:  CALL   0A6
04B5:  INCF   3C,F
04B6:  MOVWF  77
04B7:  MOVWF  46
04B8:  CALL   173
04B9:  MOVLW  11
04BA:  SUBWF  3C,W
04BB:  BTFSS  03.2
04BC:  GOTO   4B3
....................       printf(lcd_putc,"\nMsegundos:%lu",f_retardo); 
04BD:  CLRF   3C
04BE:  MOVF   3C,W
04BF:  CALL   0BC
04C0:  INCF   3C,F
04C1:  MOVWF  77
04C2:  MOVWF  46
04C3:  CALL   173
04C4:  MOVLW  0B
04C5:  SUBWF  3C,W
04C6:  BTFSS  03.2
04C7:  GOTO   4BE
04C8:  MOVLW  10
04C9:  MOVWF  04
04CA:  MOVF   38,W
04CB:  MOVWF  3E
04CC:  MOVF   37,W
04CD:  MOVWF  3D
04CE:  GOTO   1F4
....................       if((input(pin_b4)==0)&&(retardo<255)){ 
04CF:  BSF    03.5
04D0:  BSF    06.4
04D1:  BCF    03.5
04D2:  BTFSC  06.4
04D3:  GOTO   4E0
04D4:  INCFSZ 35,W
04D5:  GOTO   4D7
04D6:  GOTO   4E0
....................        retardo=retardo+20; 
04D7:  MOVLW  14
04D8:  ADDWF  35,F
....................        delay_ms(1000); 
04D9:  MOVLW  04
04DA:  MOVWF  3C
04DB:  MOVLW  FA
04DC:  MOVWF  3D
04DD:  CALL   0F2
04DE:  DECFSZ 3C,F
04DF:  GOTO   4DB
....................        }       
....................        if((input(pin_b5)==0)&&(retardo>10)){ 
04E0:  BSF    03.5
04E1:  BSF    06.5
04E2:  BCF    03.5
04E3:  BTFSC  06.5
04E4:  GOTO   4F2
04E5:  MOVF   35,W
04E6:  SUBLW  0A
04E7:  BTFSC  03.0
04E8:  GOTO   4F2
....................        retardo=retardo-20; 
04E9:  MOVLW  14
04EA:  SUBWF  35,F
....................        delay_ms(1000); 
04EB:  MOVLW  04
04EC:  MOVWF  3C
04ED:  MOVLW  FA
04EE:  MOVWF  3D
04EF:  CALL   0F2
04F0:  DECFSZ 3C,F
04F1:  GOTO   4ED
....................        } 
....................      f_retardo=make16(0,retardo); 
04F2:  CLRF   38
04F3:  MOVF   35,W
04F4:  MOVWF  37
....................      f_retardo=f_retardo*10; 
04F5:  MOVF   38,W
04F6:  MOVWF  3D
04F7:  MOVF   37,W
04F8:  MOVWF  3C
04F9:  CLRF   3F
04FA:  MOVLW  0A
04FB:  MOVWF  3E
04FC:  CALL   259
04FD:  MOVF   79,W
04FE:  MOVWF  38
04FF:  MOVF   78,W
0500:  MOVWF  37
....................       restart_wdt();           
0501:  CLRWDT
....................       write_eeprom(2,retardo); 
0502:  MOVLW  02
0503:  BSF    03.6
0504:  MOVWF  0D
0505:  BCF    03.6
0506:  MOVF   35,W
0507:  BSF    03.6
0508:  MOVWF  0C
0509:  BSF    03.5
050A:  BCF    0C.7
050B:  BSF    0C.2
050C:  BCF    03.5
050D:  BCF    03.6
050E:  MOVF   0B,W
050F:  MOVWF  77
0510:  BCF    0B.7
0511:  BSF    03.5
0512:  BSF    03.6
0513:  MOVLW  55
0514:  MOVWF  0D
0515:  MOVLW  AA
0516:  MOVWF  0D
0517:  BSF    0C.1
0518:  BTFSC  0C.1
0519:  GOTO   518
051A:  BCF    0C.2
051B:  MOVF   77,W
051C:  BCF    03.5
051D:  BCF    03.6
051E:  IORWF  0B,F
....................       delay_ms(1000); 
051F:  MOVLW  04
0520:  MOVWF  3C
0521:  MOVLW  FA
0522:  MOVWF  3D
0523:  CALL   0F2
0524:  DECFSZ 3C,F
0525:  GOTO   521
....................       break; 
0526:  GOTO   54A
....................        
....................      default:    
....................      printf(lcd_putc,"\f(V) Definida:%u\n(V) Atual :%u",definida,lida); 
0527:  CLRF   3C
0528:  MOVF   3C,W
0529:  CALL   0CF
052A:  INCF   3C,F
052B:  MOVWF  77
052C:  MOVWF  46
052D:  CALL   173
052E:  MOVLW  0E
052F:  SUBWF  3C,W
0530:  BTFSS  03.2
0531:  GOTO   528
0532:  MOVF   30,W
0533:  MOVWF  3E
0534:  MOVLW  1B
0535:  MOVWF  3F
0536:  CALL   1BF
0537:  MOVLW  10
0538:  MOVWF  3D
0539:  MOVF   3D,W
053A:  CALL   0CF
053B:  INCF   3D,F
053C:  MOVWF  77
053D:  MOVWF  46
053E:  CALL   173
053F:  MOVLW  1C
0540:  SUBWF  3D,W
0541:  BTFSS  03.2
0542:  GOTO   539
0543:  MOVF   31,W
0544:  MOVWF  3E
0545:  MOVLW  1B
0546:  MOVWF  3F
0547:  CALL   1BF
....................      menu=0; 
0548:  CLRF   34
....................      break; 
0549:  GOTO   54A
....................   } 
....................     
....................     if((lida > Vmin)&&(t_retardo==0)){ 
054A:  MOVF   31,W
054B:  SUBWF  32,W
054C:  BTFSC  03.0
054D:  GOTO   563
054E:  MOVF   36,F
054F:  BTFSS  03.2
0550:  GOTO   563
....................     while (f_retardo!=0){ 
0551:  MOVF   37,F
0552:  BTFSS  03.2
0553:  GOTO   557
0554:  MOVF   38,F
0555:  BTFSC  03.2
0556:  GOTO   563
....................     t_retardo= 1; 
0557:  MOVLW  01
0558:  MOVWF  36
....................     f_retardo=f_retardo-1; 
0559:  SUBWF  37,F
055A:  MOVLW  00
055B:  BTFSS  03.0
055C:  MOVLW  01
055D:  SUBWF  38,F
....................     delay_ms(15); 
055E:  MOVLW  0F
055F:  MOVWF  3D
0560:  CALL   0F2
....................     restart_wdt(); 
0561:  CLRWDT
....................     } 
0562:  GOTO   551
....................     } 
....................      
....................     if((lida>Vmin)&&(t_retardo==1)){  
0563:  MOVF   31,W
0564:  SUBWF  32,W
0565:  BTFSC  03.0
0566:  GOTO   588
0567:  DECFSZ 36,W
0568:  GOTO   588
....................      
....................       if((lida+histerese)<definida){ 
0569:  MOVF   2F,W
056A:  ADDWF  31,W
056B:  SUBWF  30,W
056C:  BTFSC  03.2
056D:  GOTO   575
056E:  BTFSS  03.0
056F:  GOTO   575
....................       output_high(pin_a2); 
0570:  BSF    03.5
0571:  BCF    05.2
0572:  BCF    03.5
0573:  BSF    05.2
....................       } else output_low(pin_a2); 
0574:  GOTO   579
0575:  BSF    03.5
0576:  BCF    05.2
0577:  BCF    03.5
0578:  BCF    05.2
....................        
....................         if((lida-histerese)>definida){ 
0579:  MOVF   2F,W
057A:  SUBWF  31,W
057B:  SUBWF  30,W
057C:  BTFSC  03.0
057D:  GOTO   583
....................       output_high(pin_a1); 
057E:  BSF    03.5
057F:  BCF    05.1
0580:  BCF    03.5
0581:  BSF    05.1
....................       } else output_low(pin_a1);     
0582:  GOTO   587
0583:  BSF    03.5
0584:  BCF    05.1
0585:  BCF    03.5
0586:  BCF    05.1
....................    } 
....................     else { 
0587:  GOTO   5A0
....................     f_retardo=make16(0,retardo); 
0588:  CLRF   38
0589:  MOVF   35,W
058A:  MOVWF  37
....................     f_retardo=f_retardo*10; 
058B:  MOVF   38,W
058C:  MOVWF  3D
058D:  MOVF   37,W
058E:  MOVWF  3C
058F:  CLRF   3F
0590:  MOVLW  0A
0591:  MOVWF  3E
0592:  CALL   259
0593:  MOVF   79,W
0594:  MOVWF  38
0595:  MOVF   78,W
0596:  MOVWF  37
....................     t_retardo=0; 
0597:  CLRF   36
....................     output_low(pin_a2); 
0598:  BSF    03.5
0599:  BCF    05.2
059A:  BCF    03.5
059B:  BCF    05.2
....................     output_low(pin_a1); 
059C:  BSF    03.5
059D:  BCF    05.1
059E:  BCF    03.5
059F:  BCF    05.1
....................     } 
....................      
....................    delay_ms(200); 
05A0:  MOVLW  C8
05A1:  MOVWF  3D
05A2:  CALL   0F2
....................      
....................    } 
05A3:  GOTO   301
....................     
.................... } 
....................  
....................  
05A4:  SLEEP

Configuration Fuses:
   Word  1: 3F76   HS WDT PUT NODEBUG NOPROTECT BROWNOUT NOLVP NOCPD NOWRT

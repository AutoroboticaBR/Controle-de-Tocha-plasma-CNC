CCS PCM C Compiler, Version 4.074, 38112               05-dez-17 16:57

               Filename: C:\Users\Raulstar\Google Drive\THC\THC 3.lst

               ROM used: 998 words (12%)
                         Largest free fragment is 2048
               RAM used: 15 (4%) at main() level
                         27 (7%) worst case
               Stack:    4 locations

*
0000:  MOVLW  00
0001:  MOVWF  0A
0002:  GOTO   1BF
0003:  NOP
.................... #include <16f877a.h> 
.................... //////// Standard Header file for the PIC16F877A device //////////////// 
.................... #device PIC16F877A 
.................... #list 
....................  
.................... #use delay(clock=1000000) 
*
00C1:  MOVLW  28
00C2:  MOVWF  04
00C3:  BCF    03.7
00C4:  MOVF   00,W
00C5:  BTFSC  03.2
00C6:  GOTO   0CD
00C7:  MOVLW  52
00C8:  MOVWF  77
00C9:  DECFSZ 77,F
00CA:  GOTO   0C9
00CB:  DECFSZ 00,F
00CC:  GOTO   0C7
00CD:  RETLW  00
.................... #fuses hs 
.................... #FUSES PUT    
.................... #include <lcd.c> 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////                             LCDD.C                                //// 
.................... ////                 Driver for common LCD modules                     //// 
.................... ////                                                                   //// 
.................... ////  lcd_init()   Must be called before any other function.           //// 
.................... ////                                                                   //// 
.................... ////  lcd_putc(c)  Will display c on the next position of the LCD.     //// 
.................... ////                     The following have special meaning:           //// 
.................... ////                      \f  Clear display                            //// 
.................... ////                      \n  Go to start of second line               //// 
.................... ////                      \b  Move back one position                   //// 
.................... ////                                                                   //// 
.................... ////  lcd_gotoxy(x,y) Set write position on LCD (upper left is 1,1)    //// 
.................... ////                                                                   //// 
.................... ////  lcd_getc(x,y)   Returns character at position x,y on LCD         //// 
.................... ////                                                                   //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2007 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... // As defined in the following structure the pin connection is as follows: 
.................... //     D0  enable 
.................... //     D1  rs 
.................... //     D2  rw 
.................... //     D4  D4 
.................... //     D5  D5 
.................... //     D6  D6 
.................... //     D7  D7 
.................... // 
.................... //   LCD pins D0-D3 are not used and PIC D3 is not used. 
....................  
.................... // Un-comment the following define to use port B 
.................... // #define use_portb_lcd TRUE 
....................  
....................  
.................... struct lcd_pin_map {                 // This structure is overlayed 
....................            BOOLEAN enable;           // on to an I/O port to gain 
....................            BOOLEAN rs;               // access to the LCD pins. 
....................            BOOLEAN rw;               // The bits are allocated from 
....................            BOOLEAN unused;           // low order up.  ENABLE will 
....................            int     data : 4;         // be pin B0. 
....................         } lcd; 
....................  
....................  
.................... #if defined use_portb_lcd 
....................    //#locate lcd = getenv("sfr:PORTB")    // This puts the entire structure over the port 
....................    #ifdef __pch__ 
....................     #locate lcd = 0xf81 
....................    #else 
....................     #locate lcd = 6 
....................    #endif 
....................    #define set_tris_lcd(x) set_tris_b(x) 
.................... #else 
....................    //#locate lcd = getenv("sfr:PORTD")    // This puts the entire structure over the port 
....................    #ifdef __pch__ 
....................     #locate lcd = 0xf83 
....................    #else 
....................     #locate lcd = 8 
....................    #endif 
....................    #define set_tris_lcd(x) set_tris_d(x) 
.................... #endif 
....................  
.................... #ifndef lcd_type 
.................... #define lcd_type 2           // 0=5x7, 1=5x10, 2=2 lines 
.................... #endif 
....................  
.................... #define lcd_line_two 0x40    // LCD RAM address for the second line 
....................  
....................  
.................... BYTE const LCD_INIT_STRING[4] = {0x20 | (lcd_type << 2), 0xc, 1, 6}; 
....................                              // These bytes need to be sent to the LCD 
....................                              // to start it up. 
....................  
....................  
....................                              // The following are used for setting 
....................                              // the I/O port direction register. 
....................  
.................... struct lcd_pin_map const LCD_WRITE = {0,0,0,0,0}; // For write mode all pins are out 
.................... struct lcd_pin_map const LCD_READ = {0,0,0,0,15}; // For read mode data pins are in 
....................  
....................  
....................  
.................... BYTE lcd_read_byte() { 
....................       BYTE low,high; 
....................       set_tris_lcd(LCD_READ); 
*
00DA:  MOVLW  F0
00DB:  BSF    03.5
00DC:  MOVWF  08
....................       lcd.rw = 1; 
00DD:  BCF    03.5
00DE:  BSF    08.2
....................       delay_cycles(1); 
00DF:  NOP
....................       lcd.enable = 1; 
00E0:  BSF    08.0
....................       delay_cycles(1); 
00E1:  NOP
....................       high = lcd.data; 
00E2:  MOVF   08,W
00E3:  SWAPF  08,W
00E4:  ANDLW  0F
00E5:  MOVWF  33
....................       lcd.enable = 0; 
00E6:  BCF    08.0
....................       delay_cycles(1); 
00E7:  NOP
....................       lcd.enable = 1; 
00E8:  BSF    08.0
....................       delay_us(1); 
....................       low = lcd.data; 
00E9:  MOVF   08,W
00EA:  SWAPF  08,W
00EB:  ANDLW  0F
00EC:  MOVWF  32
....................       lcd.enable = 0; 
00ED:  BCF    08.0
....................       set_tris_lcd(LCD_WRITE); 
00EE:  MOVLW  00
00EF:  BSF    03.5
00F0:  MOVWF  08
....................       return( (high<<4) | low); 
00F1:  BCF    03.5
00F2:  SWAPF  33,W
00F3:  MOVWF  77
00F4:  MOVLW  F0
00F5:  ANDWF  77,F
00F6:  MOVF   77,W
00F7:  IORWF  32,W
00F8:  MOVWF  78
.................... } 
....................  
....................  
.................... void lcd_send_nibble( BYTE n ) { 
....................       lcd.data = n; 
*
00CE:  SWAPF  33,W
00CF:  ANDLW  F0
00D0:  MOVWF  77
00D1:  MOVLW  0F
00D2:  ANDWF  08,W
00D3:  IORWF  77,W
00D4:  MOVWF  08
....................       delay_cycles(1); 
00D5:  NOP
....................       lcd.enable = 1; 
00D6:  BSF    08.0
....................       delay_us(2); 
....................       lcd.enable = 0; 
00D7:  BCF    08.0
.................... } 
00D8:  RETLW  00
....................  
....................  
.................... void lcd_send_byte( BYTE address, BYTE n ) { 
....................  
....................       lcd.rs = 0; 
00D9:  BCF    08.1
....................       while ( bit_test(lcd_read_byte(),7) ) ; 
*
00F9:  MOVF   78,W
00FA:  MOVWF  32
00FB:  BTFSC  32.7
00FC:  GOTO   0DA
....................       lcd.rs = address; 
00FD:  BTFSS  30.0
00FE:  BCF    08.1
00FF:  BTFSC  30.0
0100:  BSF    08.1
....................       delay_cycles(1); 
0101:  NOP
....................       lcd.rw = 0; 
0102:  BCF    08.2
....................       delay_cycles(1); 
0103:  NOP
....................       lcd.enable = 0; 
0104:  BCF    08.0
....................       lcd_send_nibble(n >> 4); 
0105:  SWAPF  31,W
0106:  MOVWF  32
0107:  MOVLW  0F
0108:  ANDWF  32,F
0109:  MOVF   32,W
010A:  MOVWF  33
010B:  CALL   0CE
....................       lcd_send_nibble(n & 0xf); 
010C:  MOVF   31,W
010D:  ANDLW  0F
010E:  MOVWF  32
010F:  MOVWF  33
0110:  CALL   0CE
.................... } 
0111:  RETLW  00
....................  
....................  
.................... void lcd_init() { 
....................     BYTE i; 
....................     set_tris_lcd(LCD_WRITE); 
0112:  MOVLW  00
0113:  BSF    03.5
0114:  MOVWF  08
....................     lcd.rs = 0; 
0115:  BCF    03.5
0116:  BCF    08.1
....................     lcd.rw = 0; 
0117:  BCF    08.2
....................     lcd.enable = 0; 
0118:  BCF    08.0
....................     delay_ms(15); 
0119:  MOVLW  0F
011A:  MOVWF  28
011B:  CALL   0C1
....................     for(i=1;i<=3;++i) { 
011C:  MOVLW  01
011D:  MOVWF  27
011E:  MOVF   27,W
011F:  SUBLW  03
0120:  BTFSS  03.0
0121:  GOTO   12A
....................        lcd_send_nibble(3); 
0122:  MOVLW  03
0123:  MOVWF  33
0124:  CALL   0CE
....................        delay_ms(5); 
0125:  MOVLW  05
0126:  MOVWF  28
0127:  CALL   0C1
....................     } 
0128:  INCF   27,F
0129:  GOTO   11E
....................     lcd_send_nibble(2); 
012A:  MOVLW  02
012B:  MOVWF  33
012C:  CALL   0CE
....................     for(i=0;i<=3;++i) 
012D:  CLRF   27
012E:  MOVF   27,W
012F:  SUBLW  03
0130:  BTFSS  03.0
0131:  GOTO   13B
....................        lcd_send_byte(0,LCD_INIT_STRING[i]); 
0132:  MOVF   27,W
0133:  CALL   004
0134:  MOVWF  28
0135:  CLRF   30
0136:  MOVF   28,W
0137:  MOVWF  31
0138:  CALL   0D9
0139:  INCF   27,F
013A:  GOTO   12E
.................... } 
013B:  BCF    0A.3
013C:  BCF    0A.4
013D:  GOTO   1E2 (RETURN)
....................  
....................  
.................... void lcd_gotoxy( BYTE x, BYTE y) { 
....................    BYTE address; 
....................  
....................    if(y!=1) 
*
0157:  DECFSZ 2D,W
0158:  GOTO   15A
0159:  GOTO   15D
....................      address=lcd_line_two; 
015A:  MOVLW  40
015B:  MOVWF  2E
....................    else 
015C:  GOTO   15E
....................      address=0; 
015D:  CLRF   2E
....................    address+=x-1; 
015E:  MOVLW  01
015F:  SUBWF  2C,W
0160:  ADDWF  2E,F
....................    lcd_send_byte(0,0x80|address); 
0161:  MOVF   2E,W
0162:  IORLW  80
0163:  MOVWF  2F
0164:  CLRF   30
0165:  MOVF   2F,W
0166:  MOVWF  31
0167:  CALL   0D9
.................... } 
....................  
.................... void lcd_putc( char c) { 
....................    switch (c) { 
*
013E:  MOVF   2B,W
013F:  XORLW  0C
0140:  BTFSC  03.2
0141:  GOTO   149
0142:  XORLW  06
0143:  BTFSC  03.2
0144:  GOTO   153
0145:  XORLW  02
0146:  BTFSC  03.2
0147:  GOTO   169
0148:  GOTO   16E
....................      case '\f'   : lcd_send_byte(0,1); 
0149:  CLRF   30
014A:  MOVLW  01
014B:  MOVWF  31
014C:  CALL   0D9
....................                    delay_ms(2); 
014D:  MOVLW  A6
014E:  MOVWF  77
014F:  DECFSZ 77,F
0150:  GOTO   14F
0151:  NOP
....................                                            break; 
0152:  GOTO   174
....................      case '\n'   : lcd_gotoxy(1,2);        break; 
0153:  MOVLW  01
0154:  MOVWF  2C
0155:  MOVLW  02
0156:  MOVWF  2D
*
0168:  GOTO   174
....................      case '\b'   : lcd_send_byte(0,0x10);  break; 
0169:  CLRF   30
016A:  MOVLW  10
016B:  MOVWF  31
016C:  CALL   0D9
016D:  GOTO   174
....................      default     : lcd_send_byte(1,c);     break; 
016E:  MOVLW  01
016F:  MOVWF  30
0170:  MOVF   2B,W
0171:  MOVWF  31
0172:  CALL   0D9
0173:  GOTO   174
....................    } 
.................... } 
0174:  RETLW  00
....................  
.................... char lcd_getc( BYTE x, BYTE y) { 
....................    char value; 
....................  
....................     lcd_gotoxy(x,y); 
....................     while ( bit_test(lcd_read_byte(),7) ); // wait until busy flag is low 
....................     lcd.rs=1; 
....................     value = lcd_read_byte(); 
....................     lcd.rs=0; 
....................     return(value); 
.................... } 
....................  
.................... #FUSES WDT 
....................  
.................... int histerese=5; 
*
01CA:  MOVLW  05
01CB:  BCF    03.5
01CC:  MOVWF  20
.................... int definida; 
.................... int lida=0; 
01CD:  CLRF   22
.................... Int Vmin=25; 
01CE:  MOVLW  19
01CF:  MOVWF  23
.................... int temp=0; 
01D0:  CLRF   24
.................... int menu=0; 
01D1:  CLRF   25
....................  
....................  
....................  
.................... void main(){ 
*
01BF:  CLRF   04
01C0:  BCF    03.7
01C1:  MOVLW  1F
01C2:  ANDWF  03,F
01C3:  BSF    03.5
01C4:  BSF    1F.0
01C5:  BSF    1F.1
01C6:  BSF    1F.2
01C7:  BCF    1F.3
01C8:  MOVLW  07
01C9:  MOVWF  1C
....................     
....................    setup_adc_ports(AN0_AN1_AN3); 
*
01D4:  BSF    03.5
01D5:  BCF    1F.0
01D6:  BCF    1F.1
01D7:  BSF    1F.2
01D8:  BCF    1F.3
....................    setup_adc(ADC_CLOCK_DIV_32);     
01D9:  BCF    1F.6
01DA:  BCF    03.5
01DB:  BCF    1F.6
01DC:  BSF    1F.7
01DD:  BSF    03.5
01DE:  BCF    1F.7
01DF:  BCF    03.5
01E0:  BSF    1F.0
....................    lcd_init(); 
01E1:  GOTO   112
....................    setup_wdt(WDT_288MS); 
01E2:  MOVLW  0C
01E3:  MOVWF  77
01E4:  CLRF   01
01E5:  MOVLW  81
01E6:  MOVWF  04
01E7:  BCF    03.7
01E8:  MOVF   00,W
01E9:  ANDLW  F0
01EA:  IORLW  07
01EB:  MOVWF  00
01EC:  CLRWDT
01ED:  MOVF   00,W
01EE:  ANDLW  F7
01EF:  BTFSC  77.3
01F0:  ANDLW  F0
01F1:  IORWF  77,W
01F2:  MOVWF  00
....................    set_tris_c(0b11111111); 
01F3:  MOVLW  FF
01F4:  BSF    03.5
01F5:  MOVWF  07
01F6:  BCF    03.5
01F7:  MOVWF  26
....................    set_tris_b(0b11111001); 
01F8:  MOVLW  F9
01F9:  BSF    03.5
01FA:  MOVWF  06
....................    port_b_pullups(true); 
01FB:  BCF    01.7
....................    set_tris_a(0b11111111); 
01FC:  MOVLW  FF
01FD:  MOVWF  05
....................    printf(lcd_putc,"\fRaul "); 
01FE:  BCF    03.5
01FF:  CLRF   27
0200:  MOVF   27,W
0201:  CALL   00C
0202:  INCF   27,F
0203:  MOVWF  77
0204:  MOVWF  2B
0205:  CALL   13E
0206:  MOVLW  06
0207:  SUBWF  27,W
0208:  BTFSS  03.2
0209:  GOTO   200
....................    printf(lcd_putc,"\nControle THC"); 
020A:  CLRF   27
020B:  MOVF   27,W
020C:  CALL   017
020D:  INCF   27,F
020E:  MOVWF  77
020F:  MOVWF  2B
0210:  CALL   13E
0211:  MOVLW  0D
0212:  SUBWF  27,W
0213:  BTFSS  03.2
0214:  GOTO   20B
....................    delay_ms(3000); 
0215:  MOVLW  0C
0216:  MOVWF  27
0217:  MOVLW  FA
0218:  MOVWF  28
0219:  CALL   0C1
021A:  DECFSZ 27,F
021B:  GOTO   217
....................    definida=read_eeprom(0); 
021C:  BSF    03.6
021D:  CLRF   0D
021E:  BSF    03.5
021F:  BCF    0C.7
0220:  BSF    0C.0
0221:  BCF    03.5
0222:  MOVF   0C,W
0223:  BCF    03.6
0224:  MOVWF  21
....................    histerese=read_eeprom(1); 
0225:  MOVLW  01
0226:  BSF    03.6
0227:  MOVWF  0D
0228:  BSF    03.5
0229:  BCF    0C.7
022A:  BSF    0C.0
022B:  BCF    03.5
022C:  MOVF   0C,W
022D:  BCF    03.6
022E:  MOVWF  20
....................     
....................    while(true){ 
....................    restart_wdt(); 
022F:  CLRWDT
....................    set_adc_channel(0);    
0230:  MOVLW  00
0231:  MOVWF  78
0232:  MOVF   1F,W
0233:  ANDLW  C7
0234:  IORWF  78,W
0235:  MOVWF  1F
....................    temp=read_adc(); 
0236:  BSF    1F.2
0237:  BTFSC  1F.2
0238:  GOTO   237
0239:  MOVF   1E,W
023A:  MOVWF  24
....................    temp=temp*1;//0.5 
....................    lida=(lida+temp)/2; 
023B:  MOVF   24,W
023C:  ADDWF  22,W
023D:  MOVWF  77
023E:  BCF    03.0
023F:  RRF    77,W
0240:  MOVWF  22
....................    delay_ms(300);   
0241:  MOVLW  02
0242:  MOVWF  27
0243:  MOVLW  96
0244:  MOVWF  28
0245:  CALL   0C1
0246:  DECFSZ 27,F
0247:  GOTO   243
....................     
....................     if((input(pin_b3)==0)&&(menu==3)){ 
0248:  BSF    03.5
0249:  BSF    06.3
024A:  BCF    03.5
024B:  BTFSC  06.3
024C:  GOTO   259
024D:  MOVF   25,W
024E:  SUBLW  03
024F:  BTFSS  03.2
0250:  GOTO   259
....................    menu=0; 
0251:  CLRF   25
....................    delay_ms(1500); 
0252:  MOVLW  06
0253:  MOVWF  27
0254:  MOVLW  FA
0255:  MOVWF  28
0256:  CALL   0C1
0257:  DECFSZ 27,F
0258:  GOTO   254
....................    } 
....................     
....................     if((input(pin_b3)==0)&&(menu==2)){ 
0259:  BSF    03.5
025A:  BSF    06.3
025B:  BCF    03.5
025C:  BTFSC  06.3
025D:  GOTO   26B
025E:  MOVF   25,W
025F:  SUBLW  02
0260:  BTFSS  03.2
0261:  GOTO   26B
....................    menu=3; 
0262:  MOVLW  03
0263:  MOVWF  25
....................    delay_ms(1500); 
0264:  MOVLW  06
0265:  MOVWF  27
0266:  MOVLW  FA
0267:  MOVWF  28
0268:  CALL   0C1
0269:  DECFSZ 27,F
026A:  GOTO   266
....................    } 
....................        
....................    if((input(pin_b3)==0)&&(menu==1)){ 
026B:  BSF    03.5
026C:  BSF    06.3
026D:  BCF    03.5
026E:  BTFSC  06.3
026F:  GOTO   27B
0270:  DECFSZ 25,W
0271:  GOTO   27B
....................    menu=2; 
0272:  MOVLW  02
0273:  MOVWF  25
....................    delay_ms(1500); 
0274:  MOVLW  06
0275:  MOVWF  27
0276:  MOVLW  FA
0277:  MOVWF  28
0278:  CALL   0C1
0279:  DECFSZ 27,F
027A:  GOTO   276
....................    } 
....................     
....................      if((input(pin_b3)==0)&&(menu==0)){ 
027B:  BSF    03.5
027C:  BSF    06.3
027D:  BCF    03.5
027E:  BTFSC  06.3
027F:  GOTO   28C
0280:  MOVF   25,F
0281:  BTFSS  03.2
0282:  GOTO   28C
....................    menu=1; 
0283:  MOVLW  01
0284:  MOVWF  25
....................    delay_ms(1500); 
0285:  MOVLW  06
0286:  MOVWF  27
0287:  MOVLW  FA
0288:  MOVWF  28
0289:  CALL   0C1
028A:  DECFSZ 27,F
028B:  GOTO   287
....................    } 
....................     
....................    switch (menu){ 
028C:  MOVF   25,W
028D:  XORLW  01
028E:  BTFSC  03.2
028F:  GOTO   297
0290:  XORLW  03
0291:  BTFSC  03.2
0292:  GOTO   2E9
0293:  XORLW  01
0294:  BTFSC  03.2
0295:  GOTO   31C
0296:  GOTO   38F
....................       case 1: 
....................       printf(lcd_putc,"\fAjuste de tensao"); 
0297:  CLRF   27
0298:  MOVF   27,W
0299:  CALL   029
029A:  INCF   27,F
029B:  MOVWF  77
029C:  MOVWF  2B
029D:  CALL   13E
029E:  MOVLW  11
029F:  SUBWF  27,W
02A0:  BTFSS  03.2
02A1:  GOTO   298
....................       printf(lcd_putc,"\nVoltagem:%u",definida); 
02A2:  CLRF   27
02A3:  MOVF   27,W
02A4:  CALL   03F
02A5:  INCF   27,F
02A6:  MOVWF  77
02A7:  MOVWF  2B
02A8:  CALL   13E
02A9:  MOVLW  0A
02AA:  SUBWF  27,W
02AB:  BTFSS  03.2
02AC:  GOTO   2A3
02AD:  MOVF   21,W
02AE:  MOVWF  29
02AF:  MOVLW  1B
02B0:  MOVWF  2A
02B1:  CALL   18A
....................       restart_wdt(); 
02B2:  CLRWDT
....................       if((input(pin_b4)==0)&&(definida<256)){ 
02B3:  BSF    03.5
02B4:  BSF    06.4
02B5:  BCF    03.5
02B6:  BTFSC  06.4
02B7:  GOTO   2BA
....................       definida=definida+1; 
02B8:  MOVLW  01
02B9:  ADDWF  21,F
....................        } 
....................         
....................        if((input(pin_b5)==0)&&(definida>1)){ 
02BA:  BSF    03.5
02BB:  BSF    06.5
02BC:  BCF    03.5
02BD:  BTFSC  06.5
02BE:  GOTO   2C5
02BF:  MOVF   21,W
02C0:  SUBLW  01
02C1:  BTFSC  03.0
02C2:  GOTO   2C5
....................        definida=definida-1; 
02C3:  MOVLW  01
02C4:  SUBWF  21,F
....................        } 
....................        write_eeprom(0,definida); 
02C5:  BSF    03.6
02C6:  CLRF   0D
02C7:  BCF    03.6
02C8:  MOVF   21,W
02C9:  BSF    03.6
02CA:  MOVWF  0C
02CB:  BSF    03.5
02CC:  BCF    0C.7
02CD:  BSF    0C.2
02CE:  BCF    03.5
02CF:  BCF    03.6
02D0:  MOVF   0B,W
02D1:  MOVWF  77
02D2:  BCF    0B.7
02D3:  BSF    03.5
02D4:  BSF    03.6
02D5:  MOVLW  55
02D6:  MOVWF  0D
02D7:  MOVLW  AA
02D8:  MOVWF  0D
02D9:  BSF    0C.1
02DA:  BTFSC  0C.1
02DB:  GOTO   2DA
02DC:  BCF    0C.2
02DD:  MOVF   77,W
02DE:  BCF    03.5
02DF:  BCF    03.6
02E0:  IORWF  0B,F
....................        delay_ms(1000);     
02E1:  MOVLW  04
02E2:  MOVWF  27
02E3:  MOVLW  FA
02E4:  MOVWF  28
02E5:  CALL   0C1
02E6:  DECFSZ 27,F
02E7:  GOTO   2E3
....................        break; 
02E8:  GOTO   3B2
....................        
....................        case 2: 
....................       printf(lcd_putc,"\fAjuste histerese"); 
02E9:  CLRF   27
02EA:  MOVF   27,W
02EB:  CALL   050
02EC:  INCF   27,F
02ED:  MOVWF  77
02EE:  MOVWF  2B
02EF:  CALL   13E
02F0:  MOVLW  11
02F1:  SUBWF  27,W
02F2:  BTFSS  03.2
02F3:  GOTO   2EA
....................       printf(lcd_putc,"\nVolts:%u",histerese); 
02F4:  CLRF   27
02F5:  MOVF   27,W
02F6:  CALL   066
02F7:  INCF   27,F
02F8:  MOVWF  77
02F9:  MOVWF  2B
02FA:  CALL   13E
02FB:  MOVLW  07
02FC:  SUBWF  27,W
02FD:  BTFSS  03.2
02FE:  GOTO   2F5
02FF:  MOVF   20,W
0300:  MOVWF  29
0301:  MOVLW  1B
0302:  MOVWF  2A
0303:  CALL   18A
....................        restart_wdt(); 
0304:  CLRWDT
....................        if((input(pin_b4)==0)&&(histerese<50)){ 
0305:  BSF    03.5
0306:  BSF    06.4
0307:  BCF    03.5
0308:  BTFSC  06.4
0309:  GOTO   310
030A:  MOVF   20,W
030B:  SUBLW  31
030C:  BTFSS  03.0
030D:  GOTO   310
....................        histerese=histerese+1; 
030E:  MOVLW  01
030F:  ADDWF  20,F
....................        } 
....................         
....................        if((input(pin_b5)==0)&&(histerese>1)){ 
0310:  BSF    03.5
0311:  BSF    06.5
0312:  BCF    03.5
0313:  BTFSC  06.5
0314:  GOTO   31B
0315:  MOVF   20,W
0316:  SUBLW  01
0317:  BTFSC  03.0
0318:  GOTO   31B
....................        histerese=histerese-1; 
0319:  MOVLW  01
031A:  SUBWF  20,F
....................        } 
....................        break; 
031B:  GOTO   3B2
....................         
....................        case 3: 
....................       printf(lcd_putc,"\fTeste de saida"); 
031C:  CLRF   27
031D:  MOVF   27,W
031E:  CALL   074
031F:  INCF   27,F
0320:  MOVWF  77
0321:  MOVWF  2B
0322:  CALL   13E
0323:  MOVLW  0F
0324:  SUBWF  27,W
0325:  BTFSS  03.2
0326:  GOTO   31D
....................       printf(lcd_putc,"\nVolts:%u",histerese); 
0327:  CLRF   27
0328:  MOVF   27,W
0329:  CALL   066
032A:  INCF   27,F
032B:  MOVWF  77
032C:  MOVWF  2B
032D:  CALL   13E
032E:  MOVLW  07
032F:  SUBWF  27,W
0330:  BTFSS  03.2
0331:  GOTO   328
0332:  MOVF   20,W
0333:  MOVWF  29
0334:  MOVLW  1B
0335:  MOVWF  2A
0336:  CALL   18A
....................        
....................       while(input(pin_b4)==0){ 
0337:  BSF    03.5
0338:  BSF    06.4
0339:  BCF    03.5
033A:  BTFSC  06.4
033B:  GOTO   350
....................        printf(lcd_putc,"\nSobe "); 
033C:  CLRF   27
033D:  MOVF   27,W
033E:  CALL   088
033F:  INCF   27,F
0340:  MOVWF  77
0341:  MOVWF  2B
0342:  CALL   13E
0343:  MOVLW  06
0344:  SUBWF  27,W
0345:  BTFSS  03.2
0346:  GOTO   33D
....................        output_high(pin_a1); 
0347:  BSF    03.5
0348:  BCF    05.1
0349:  BCF    03.5
034A:  BSF    05.1
....................        output_low(pin_a2); 
034B:  BSF    03.5
034C:  BCF    05.2
034D:  BCF    03.5
034E:  BCF    05.2
....................        } 
034F:  GOTO   337
....................         
....................        while(input(pin_b5)==0){ 
0350:  BSF    03.5
0351:  BSF    06.5
0352:  BCF    03.5
0353:  BTFSC  06.5
0354:  GOTO   369
....................        printf(lcd_putc,"\nDesce"); 
0355:  CLRF   27
0356:  MOVF   27,W
0357:  CALL   093
0358:  INCF   27,F
0359:  MOVWF  77
035A:  MOVWF  2B
035B:  CALL   13E
035C:  MOVLW  06
035D:  SUBWF  27,W
035E:  BTFSS  03.2
035F:  GOTO   356
....................        output_high(pin_a2); 
0360:  BSF    03.5
0361:  BCF    05.2
0362:  BCF    03.5
0363:  BSF    05.2
....................        output_low(pin_a1); 
0364:  BSF    03.5
0365:  BCF    05.1
0366:  BCF    03.5
0367:  BCF    05.1
....................        } 
0368:  GOTO   350
....................       restart_wdt(); 
0369:  CLRWDT
....................     
....................         
....................        write_eeprom(1,histerese); 
036A:  MOVLW  01
036B:  BSF    03.6
036C:  MOVWF  0D
036D:  BCF    03.6
036E:  MOVF   20,W
036F:  BSF    03.6
0370:  MOVWF  0C
0371:  BSF    03.5
0372:  BCF    0C.7
0373:  BSF    0C.2
0374:  BCF    03.5
0375:  BCF    03.6
0376:  MOVF   0B,W
0377:  MOVWF  77
0378:  BCF    0B.7
0379:  BSF    03.5
037A:  BSF    03.6
037B:  MOVLW  55
037C:  MOVWF  0D
037D:  MOVLW  AA
037E:  MOVWF  0D
037F:  BSF    0C.1
0380:  BTFSC  0C.1
0381:  GOTO   380
0382:  BCF    0C.2
0383:  MOVF   77,W
0384:  BCF    03.5
0385:  BCF    03.6
0386:  IORWF  0B,F
....................        delay_ms(1000);     
0387:  MOVLW  04
0388:  MOVWF  27
0389:  MOVLW  FA
038A:  MOVWF  28
038B:  CALL   0C1
038C:  DECFSZ 27,F
038D:  GOTO   389
....................       break; 
038E:  GOTO   3B2
....................        
....................       default:    
....................      printf(lcd_putc,"\f(V) Definida:%u\n(V) Atual :%u",definida,lida); 
038F:  CLRF   27
0390:  MOVF   27,W
0391:  CALL   09E
0392:  INCF   27,F
0393:  MOVWF  77
0394:  MOVWF  2B
0395:  CALL   13E
0396:  MOVLW  0E
0397:  SUBWF  27,W
0398:  BTFSS  03.2
0399:  GOTO   390
039A:  MOVF   21,W
039B:  MOVWF  29
039C:  MOVLW  1B
039D:  MOVWF  2A
039E:  CALL   18A
039F:  MOVLW  10
03A0:  MOVWF  28
03A1:  MOVF   28,W
03A2:  CALL   09E
03A3:  INCF   28,F
03A4:  MOVWF  77
03A5:  MOVWF  2B
03A6:  CALL   13E
03A7:  MOVLW  1C
03A8:  SUBWF  28,W
03A9:  BTFSS  03.2
03AA:  GOTO   3A1
03AB:  MOVF   22,W
03AC:  MOVWF  29
03AD:  MOVLW  1B
03AE:  MOVWF  2A
03AF:  CALL   18A
....................      menu=0; 
03B0:  CLRF   25
....................      break; 
03B1:  GOTO   3B2
....................   } 
....................     
....................     if(lida>Vmin){ 
03B2:  MOVF   22,W
03B3:  SUBWF  23,W
03B4:  BTFSC  03.0
03B5:  GOTO   3D5
....................       if((lida+histerese)<definida){ 
03B6:  MOVF   20,W
03B7:  ADDWF  22,W
03B8:  SUBWF  21,W
03B9:  BTFSC  03.2
03BA:  GOTO   3C2
03BB:  BTFSS  03.0
03BC:  GOTO   3C2
....................       output_high(pin_a2); 
03BD:  BSF    03.5
03BE:  BCF    05.2
03BF:  BCF    03.5
03C0:  BSF    05.2
....................       } else output_low(pin_a2); 
03C1:  GOTO   3C6
03C2:  BSF    03.5
03C3:  BCF    05.2
03C4:  BCF    03.5
03C5:  BCF    05.2
....................        
....................         if((lida+histerese)>definida){ 
03C6:  MOVF   20,W
03C7:  ADDWF  22,W
03C8:  SUBWF  21,W
03C9:  BTFSC  03.0
03CA:  GOTO   3D0
....................       output_high(pin_a1); 
03CB:  BSF    03.5
03CC:  BCF    05.1
03CD:  BCF    03.5
03CE:  BSF    05.1
....................       } else output_low(pin_a1); 
03CF:  GOTO   3D4
03D0:  BSF    03.5
03D1:  BCF    05.1
03D2:  BCF    03.5
03D3:  BCF    05.1
....................     }else { 
03D4:  GOTO   3DD
....................     output_low(pin_a2); 
03D5:  BSF    03.5
03D6:  BCF    05.2
03D7:  BCF    03.5
03D8:  BCF    05.2
....................     output_low(pin_a1); 
03D9:  BSF    03.5
03DA:  BCF    05.1
03DB:  BCF    03.5
03DC:  BCF    05.1
....................     } 
....................      
....................    delay_ms(800); 
03DD:  MOVLW  04
03DE:  MOVWF  27
03DF:  MOVLW  C8
03E0:  MOVWF  28
03E1:  CALL   0C1
03E2:  DECFSZ 27,F
03E3:  GOTO   3DF
....................   
....................    
....................    
....................    } 
03E4:  GOTO   22F
....................     
.................... } 
....................  
....................  
03E5:  SLEEP

Configuration Fuses:
   Word  1: 3F76   HS WDT PUT NODEBUG NOPROTECT BROWNOUT NOLVP NOCPD NOWRT

CCS PCM C Compiler, Version 4.074, 38112               10-dez-17 11:51

               Filename: THC 6.lst

               ROM used: 1270 words (16%)
                         Largest free fragment is 2048
               RAM used: 36 (10%) at main() level
                         46 (12%) worst case
               Stack:    4 locations

*
0000:  MOVLW  00
0001:  MOVWF  0A
0002:  GOTO   20E
0003:  NOP
.................... #include <16f877a.h> 
.................... //////// Standard Header file for the PIC16F877A device //////////////// 
.................... #device PIC16F877A 
.................... #list 
....................  
.................... #use delay(clock=1000000) 
*
00E9:  MOVLW  3B
00EA:  MOVWF  04
00EB:  BCF    03.7
00EC:  MOVF   00,W
00ED:  BTFSC  03.2
00EE:  GOTO   0F5
00EF:  MOVLW  52
00F0:  MOVWF  77
00F1:  DECFSZ 77,F
00F2:  GOTO   0F1
00F3:  DECFSZ 00,F
00F4:  GOTO   0EF
00F5:  RETLW  00
.................... #fuses hs 
.................... #FUSES PUT    
.................... #include <lcd.c> 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////                             LCDD.C                                //// 
.................... ////                 Driver for common LCD modules                     //// 
.................... ////                                                                   //// 
.................... ////  lcd_init()   Must be called before any other function.           //// 
.................... ////                                                                   //// 
.................... ////  lcd_putc(c)  Will display c on the next position of the LCD.     //// 
.................... ////                     The following have special meaning:           //// 
.................... ////                      \f  Clear display                            //// 
.................... ////                      \n  Go to start of second line               //// 
.................... ////                      \b  Move back one position                   //// 
.................... ////                                                                   //// 
.................... ////  lcd_gotoxy(x,y) Set write position on LCD (upper left is 1,1)    //// 
.................... ////                                                                   //// 
.................... ////  lcd_getc(x,y)   Returns character at position x,y on LCD         //// 
.................... ////                                                                   //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2007 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... // As defined in the following structure the pin connection is as follows: 
.................... //     D0  enable 
.................... //     D1  rs 
.................... //     D2  rw 
.................... //     D4  D4 
.................... //     D5  D5 
.................... //     D6  D6 
.................... //     D7  D7 
.................... // 
.................... //   LCD pins D0-D3 are not used and PIC D3 is not used. 
....................  
.................... // Un-comment the following define to use port B 
.................... // #define use_portb_lcd TRUE 
....................  
....................  
.................... struct lcd_pin_map {                 // This structure is overlayed 
....................            BOOLEAN enable;           // on to an I/O port to gain 
....................            BOOLEAN rs;               // access to the LCD pins. 
....................            BOOLEAN rw;               // The bits are allocated from 
....................            BOOLEAN unused;           // low order up.  ENABLE will 
....................            int     data : 4;         // be pin B0. 
....................         } lcd; 
....................  
....................  
.................... #if defined use_portb_lcd 
....................    //#locate lcd = getenv("sfr:PORTB")    // This puts the entire structure over the port 
....................    #ifdef __pch__ 
....................     #locate lcd = 0xf81 
....................    #else 
....................     #locate lcd = 6 
....................    #endif 
....................    #define set_tris_lcd(x) set_tris_b(x) 
.................... #else 
....................    //#locate lcd = getenv("sfr:PORTD")    // This puts the entire structure over the port 
....................    #ifdef __pch__ 
....................     #locate lcd = 0xf83 
....................    #else 
....................     #locate lcd = 8 
....................    #endif 
....................    #define set_tris_lcd(x) set_tris_d(x) 
.................... #endif 
....................  
.................... #ifndef lcd_type 
.................... #define lcd_type 2           // 0=5x7, 1=5x10, 2=2 lines 
.................... #endif 
....................  
.................... #define lcd_line_two 0x40    // LCD RAM address for the second line 
....................  
....................  
.................... BYTE const LCD_INIT_STRING[4] = {0x20 | (lcd_type << 2), 0xc, 1, 6}; 
....................                              // These bytes need to be sent to the LCD 
....................                              // to start it up. 
....................  
....................  
....................                              // The following are used for setting 
....................                              // the I/O port direction register. 
....................  
.................... struct lcd_pin_map const LCD_WRITE = {0,0,0,0,0}; // For write mode all pins are out 
.................... struct lcd_pin_map const LCD_READ = {0,0,0,0,15}; // For read mode data pins are in 
....................  
....................  
....................  
.................... BYTE lcd_read_byte() { 
....................       BYTE low,high; 
....................       set_tris_lcd(LCD_READ); 
*
0102:  MOVLW  F0
0103:  BSF    03.5
0104:  MOVWF  08
....................       lcd.rw = 1; 
0105:  BCF    03.5
0106:  BSF    08.2
....................       delay_cycles(1); 
0107:  NOP
....................       lcd.enable = 1; 
0108:  BSF    08.0
....................       delay_cycles(1); 
0109:  NOP
....................       high = lcd.data; 
010A:  MOVF   08,W
010B:  SWAPF  08,W
010C:  ANDLW  0F
010D:  MOVWF  46
....................       lcd.enable = 0; 
010E:  BCF    08.0
....................       delay_cycles(1); 
010F:  NOP
....................       lcd.enable = 1; 
0110:  BSF    08.0
....................       delay_us(1); 
....................       low = lcd.data; 
0111:  MOVF   08,W
0112:  SWAPF  08,W
0113:  ANDLW  0F
0114:  MOVWF  45
....................       lcd.enable = 0; 
0115:  BCF    08.0
....................       set_tris_lcd(LCD_WRITE); 
0116:  MOVLW  00
0117:  BSF    03.5
0118:  MOVWF  08
....................       return( (high<<4) | low); 
0119:  BCF    03.5
011A:  SWAPF  46,W
011B:  MOVWF  77
011C:  MOVLW  F0
011D:  ANDWF  77,F
011E:  MOVF   77,W
011F:  IORWF  45,W
0120:  MOVWF  78
.................... } 
....................  
....................  
.................... void lcd_send_nibble( BYTE n ) { 
....................       lcd.data = n; 
*
00F6:  SWAPF  46,W
00F7:  ANDLW  F0
00F8:  MOVWF  77
00F9:  MOVLW  0F
00FA:  ANDWF  08,W
00FB:  IORWF  77,W
00FC:  MOVWF  08
....................       delay_cycles(1); 
00FD:  NOP
....................       lcd.enable = 1; 
00FE:  BSF    08.0
....................       delay_us(2); 
....................       lcd.enable = 0; 
00FF:  BCF    08.0
.................... } 
0100:  RETLW  00
....................  
....................  
.................... void lcd_send_byte( BYTE address, BYTE n ) { 
....................  
....................       lcd.rs = 0; 
0101:  BCF    08.1
....................       while ( bit_test(lcd_read_byte(),7) ) ; 
*
0121:  MOVF   78,W
0122:  MOVWF  45
0123:  BTFSC  45.7
0124:  GOTO   102
....................       lcd.rs = address; 
0125:  BTFSS  43.0
0126:  BCF    08.1
0127:  BTFSC  43.0
0128:  BSF    08.1
....................       delay_cycles(1); 
0129:  NOP
....................       lcd.rw = 0; 
012A:  BCF    08.2
....................       delay_cycles(1); 
012B:  NOP
....................       lcd.enable = 0; 
012C:  BCF    08.0
....................       lcd_send_nibble(n >> 4); 
012D:  SWAPF  44,W
012E:  MOVWF  45
012F:  MOVLW  0F
0130:  ANDWF  45,F
0131:  MOVF   45,W
0132:  MOVWF  46
0133:  CALL   0F6
....................       lcd_send_nibble(n & 0xf); 
0134:  MOVF   44,W
0135:  ANDLW  0F
0136:  MOVWF  45
0137:  MOVWF  46
0138:  CALL   0F6
.................... } 
0139:  RETLW  00
....................  
....................  
.................... void lcd_init() { 
....................     BYTE i; 
....................     set_tris_lcd(LCD_WRITE); 
013A:  MOVLW  00
013B:  BSF    03.5
013C:  MOVWF  08
....................     lcd.rs = 0; 
013D:  BCF    03.5
013E:  BCF    08.1
....................     lcd.rw = 0; 
013F:  BCF    08.2
....................     lcd.enable = 0; 
0140:  BCF    08.0
....................     delay_ms(15); 
0141:  MOVLW  0F
0142:  MOVWF  3B
0143:  CALL   0E9
....................     for(i=1;i<=3;++i) { 
0144:  MOVLW  01
0145:  MOVWF  3A
0146:  MOVF   3A,W
0147:  SUBLW  03
0148:  BTFSS  03.0
0149:  GOTO   152
....................        lcd_send_nibble(3); 
014A:  MOVLW  03
014B:  MOVWF  46
014C:  CALL   0F6
....................        delay_ms(5); 
014D:  MOVLW  05
014E:  MOVWF  3B
014F:  CALL   0E9
....................     } 
0150:  INCF   3A,F
0151:  GOTO   146
....................     lcd_send_nibble(2); 
0152:  MOVLW  02
0153:  MOVWF  46
0154:  CALL   0F6
....................     for(i=0;i<=3;++i) 
0155:  CLRF   3A
0156:  MOVF   3A,W
0157:  SUBLW  03
0158:  BTFSS  03.0
0159:  GOTO   163
....................        lcd_send_byte(0,LCD_INIT_STRING[i]); 
015A:  MOVF   3A,W
015B:  CALL   004
015C:  MOVWF  3B
015D:  CLRF   43
015E:  MOVF   3B,W
015F:  MOVWF  44
0160:  CALL   101
0161:  INCF   3A,F
0162:  GOTO   156
.................... } 
0163:  BCF    0A.3
0164:  BCF    0A.4
0165:  GOTO   23A (RETURN)
....................  
....................  
.................... void lcd_gotoxy( BYTE x, BYTE y) { 
....................    BYTE address; 
....................  
....................    if(y!=1) 
*
017F:  DECFSZ 40,W
0180:  GOTO   182
0181:  GOTO   185
....................      address=lcd_line_two; 
0182:  MOVLW  40
0183:  MOVWF  41
....................    else 
0184:  GOTO   186
....................      address=0; 
0185:  CLRF   41
....................    address+=x-1; 
0186:  MOVLW  01
0187:  SUBWF  3F,W
0188:  ADDWF  41,F
....................    lcd_send_byte(0,0x80|address); 
0189:  MOVF   41,W
018A:  IORLW  80
018B:  MOVWF  42
018C:  CLRF   43
018D:  MOVF   42,W
018E:  MOVWF  44
018F:  CALL   101
.................... } 
....................  
.................... void lcd_putc( char c) { 
....................    switch (c) { 
*
0166:  MOVF   3E,W
0167:  XORLW  0C
0168:  BTFSC  03.2
0169:  GOTO   171
016A:  XORLW  06
016B:  BTFSC  03.2
016C:  GOTO   17B
016D:  XORLW  02
016E:  BTFSC  03.2
016F:  GOTO   191
0170:  GOTO   196
....................      case '\f'   : lcd_send_byte(0,1); 
0171:  CLRF   43
0172:  MOVLW  01
0173:  MOVWF  44
0174:  CALL   101
....................                    delay_ms(2); 
0175:  MOVLW  A6
0176:  MOVWF  77
0177:  DECFSZ 77,F
0178:  GOTO   177
0179:  NOP
....................                                            break; 
017A:  GOTO   19C
....................      case '\n'   : lcd_gotoxy(1,2);        break; 
017B:  MOVLW  01
017C:  MOVWF  3F
017D:  MOVLW  02
017E:  MOVWF  40
*
0190:  GOTO   19C
....................      case '\b'   : lcd_send_byte(0,0x10);  break; 
0191:  CLRF   43
0192:  MOVLW  10
0193:  MOVWF  44
0194:  CALL   101
0195:  GOTO   19C
....................      default     : lcd_send_byte(1,c);     break; 
0196:  MOVLW  01
0197:  MOVWF  43
0198:  MOVF   3E,W
0199:  MOVWF  44
019A:  CALL   101
019B:  GOTO   19C
....................    } 
.................... } 
019C:  RETLW  00
....................  
.................... char lcd_getc( BYTE x, BYTE y) { 
....................    char value; 
....................  
....................     lcd_gotoxy(x,y); 
....................     while ( bit_test(lcd_read_byte(),7) ); // wait until busy flag is low 
....................     lcd.rs=1; 
....................     value = lcd_read_byte(); 
....................     lcd.rs=0; 
....................     return(value); 
.................... } 
....................  
.................... #FUSES WDT 
....................  
.................... #define n 8 
....................  
.................... unsigned long leitura=0; 
*
0219:  BCF    03.5
021A:  CLRF   20
021B:  CLRF   21
.................... long fitrado; 
.................... int valores[n]; 
....................  
.................... int i=0; 
021C:  CLRF   2C
.................... long soma=0; 
021D:  CLRF   2D
021E:  CLRF   2E
....................  
.................... int histerese=5; 
021F:  MOVLW  05
0220:  MOVWF  2F
.................... int definida; 
.................... int lida=0; 
0221:  CLRF   31
.................... Int Vmin=25; 
0222:  MOVLW  19
0223:  MOVWF  32
.................... int temp=0; 
0224:  CLRF   33
.................... int menu=0; 
0225:  CLRF   34
.................... int retardo=0; 
0226:  CLRF   35
.................... int t_retardo=0; 
0227:  CLRF   36
.................... long f_retardo=0; 
0228:  CLRF   37
0229:  CLRF   38
....................  
....................  
....................  
.................... void main(){ 
*
020E:  CLRF   04
020F:  BCF    03.7
0210:  MOVLW  1F
0211:  ANDWF  03,F
0212:  BSF    03.5
0213:  BSF    1F.0
0214:  BSF    1F.1
0215:  BSF    1F.2
0216:  BCF    1F.3
0217:  MOVLW  07
0218:  MOVWF  1C
....................     
....................    setup_adc_ports(AN0_AN1_AN3); 
*
022C:  BSF    03.5
022D:  BCF    1F.0
022E:  BCF    1F.1
022F:  BSF    1F.2
0230:  BCF    1F.3
....................    setup_adc(ADC_CLOCK_DIV_32);     
0231:  BCF    1F.6
0232:  BCF    03.5
0233:  BCF    1F.6
0234:  BSF    1F.7
0235:  BSF    03.5
0236:  BCF    1F.7
0237:  BCF    03.5
0238:  BSF    1F.0
....................    lcd_init(); 
0239:  GOTO   13A
....................    setup_wdt(WDT_2304MS); 
023A:  MOVLW  0F
023B:  MOVWF  77
023C:  CLRF   01
023D:  MOVLW  81
023E:  MOVWF  04
023F:  BCF    03.7
0240:  MOVF   00,W
0241:  ANDLW  F0
0242:  IORLW  07
0243:  MOVWF  00
0244:  CLRWDT
0245:  MOVF   00,W
0246:  ANDLW  F7
0247:  BTFSC  77.3
0248:  ANDLW  F0
0249:  IORWF  77,W
024A:  MOVWF  00
....................    set_tris_c(0b11111111); 
024B:  MOVLW  FF
024C:  BSF    03.5
024D:  MOVWF  07
024E:  BCF    03.5
024F:  MOVWF  39
....................    set_tris_b(0b11111001); 
0250:  MOVLW  F9
0251:  BSF    03.5
0252:  MOVWF  06
....................    port_b_pullups(true); 
0253:  BCF    01.7
....................    set_tris_a(0b11110001); 
0254:  MOVLW  F1
0255:  MOVWF  05
....................    printf(lcd_putc,"\fRaul "); 
0256:  BCF    03.5
0257:  CLRF   3A
0258:  MOVF   3A,W
0259:  CALL   00C
025A:  INCF   3A,F
025B:  MOVWF  77
025C:  MOVWF  3E
025D:  CALL   166
025E:  MOVLW  06
025F:  SUBWF  3A,W
0260:  BTFSS  03.2
0261:  GOTO   258
....................    printf(lcd_putc,"\nControle THC"); 
0262:  CLRF   3A
0263:  MOVF   3A,W
0264:  CALL   017
0265:  INCF   3A,F
0266:  MOVWF  77
0267:  MOVWF  3E
0268:  CALL   166
0269:  MOVLW  0D
026A:  SUBWF  3A,W
026B:  BTFSS  03.2
026C:  GOTO   263
....................    delay_ms(300); 
026D:  MOVLW  02
026E:  MOVWF  3A
026F:  MOVLW  96
0270:  MOVWF  3B
0271:  CALL   0E9
0272:  DECFSZ 3A,F
0273:  GOTO   26F
....................    definida=read_eeprom(0); 
0274:  BSF    03.6
0275:  CLRF   0D
0276:  BSF    03.5
0277:  BCF    0C.7
0278:  BSF    0C.0
0279:  BCF    03.5
027A:  MOVF   0C,W
027B:  BCF    03.6
027C:  MOVWF  30
....................    histerese=read_eeprom(1); 
027D:  MOVLW  01
027E:  BSF    03.6
027F:  MOVWF  0D
0280:  BSF    03.5
0281:  BCF    0C.7
0282:  BSF    0C.0
0283:  BCF    03.5
0284:  MOVF   0C,W
0285:  BCF    03.6
0286:  MOVWF  2F
....................    retardo=read_eeprom(2); 
0287:  MOVLW  02
0288:  BSF    03.6
0289:  MOVWF  0D
028A:  BSF    03.5
028B:  BCF    0C.7
028C:  BSF    0C.0
028D:  BCF    03.5
028E:  MOVF   0C,W
028F:  BCF    03.6
0290:  MOVWF  35
....................     
....................    while(true){ 
....................    restart_wdt(); 
0291:  CLRWDT
....................    set_adc_channel(0);    
0292:  MOVLW  00
0293:  MOVWF  78
0294:  MOVF   1F,W
0295:  ANDLW  C7
0296:  IORWF  78,W
0297:  MOVWF  1F
....................    temp=read_adc(); 
0298:  BSF    1F.2
0299:  BTFSC  1F.2
029A:  GOTO   299
029B:  MOVF   1E,W
029C:  MOVWF  33
....................    
....................    temp=temp*1;//0.5 
....................    leitura=temp; 
029D:  CLRF   21
029E:  MOVF   33,W
029F:  MOVWF  20
.................... for(i=(n-1); i>0; i--) { 
02A0:  MOVLW  07
02A1:  MOVWF  2C
02A2:  MOVF   2C,F
02A3:  BTFSC  03.2
02A4:  GOTO   2BB
....................    valores[i]=valores[i-1]; 
02A5:  MOVLW  24
02A6:  ADDWF  2C,W
02A7:  MOVWF  78
02A8:  CLRF   7A
02A9:  BTFSC  03.0
02AA:  INCF   7A,F
02AB:  MOVLW  01
02AC:  SUBWF  2C,W
02AD:  ADDLW  24
02AE:  MOVWF  04
02AF:  BCF    03.7
02B0:  MOVF   00,W
02B1:  MOVWF  3D
02B2:  MOVF   78,W
02B3:  MOVWF  04
02B4:  BCF    03.7
02B5:  BTFSC  7A.0
02B6:  BSF    03.7
02B7:  MOVF   3D,W
02B8:  MOVWF  00
....................    } 
02B9:  DECF   2C,F
02BA:  GOTO   2A2
....................    soma=0; 
02BB:  CLRF   2E
02BC:  CLRF   2D
.................... valores[0]=leitura; 
02BD:  MOVF   20,W
02BE:  MOVWF  24
....................  
.................... for(i=0;i<n;i++){ 
02BF:  CLRF   2C
02C0:  MOVF   2C,W
02C1:  SUBLW  07
02C2:  BTFSS  03.0
02C3:  GOTO   2CE
.................... soma+=valores[i]; 
02C4:  MOVLW  24
02C5:  ADDWF  2C,W
02C6:  MOVWF  04
02C7:  BCF    03.7
02C8:  MOVF   00,W
02C9:  ADDWF  2D,F
02CA:  BTFSC  03.0
02CB:  INCF   2E,F
.................... } 
02CC:  INCF   2C,F
02CD:  GOTO   2C0
.................... lida =soma/n; 
02CE:  RRF    2E,W
02CF:  MOVWF  7A
02D0:  RRF    2D,W
02D1:  MOVWF  79
02D2:  RRF    7A,F
02D3:  RRF    79,F
02D4:  RRF    7A,F
02D5:  RRF    79,F
02D6:  MOVF   79,W
02D7:  MOVWF  31
....................  
....................     
....................     
....................     
....................  
....................  
....................     if((input(pin_b3)==0)&&(menu==4)){ 
02D8:  BSF    03.5
02D9:  BSF    06.3
02DA:  BCF    03.5
02DB:  BTFSC  06.3
02DC:  GOTO   2E9
02DD:  MOVF   34,W
02DE:  SUBLW  04
02DF:  BTFSS  03.2
02E0:  GOTO   2E9
....................    menu=0; 
02E1:  CLRF   34
....................    delay_ms(1500); 
02E2:  MOVLW  06
02E3:  MOVWF  3A
02E4:  MOVLW  FA
02E5:  MOVWF  3B
02E6:  CALL   0E9
02E7:  DECFSZ 3A,F
02E8:  GOTO   2E4
....................    } 
....................     
....................    if((input(pin_b3)==0)&&(menu==3)){ 
02E9:  BSF    03.5
02EA:  BSF    06.3
02EB:  BCF    03.5
02EC:  BTFSC  06.3
02ED:  GOTO   2FB
02EE:  MOVF   34,W
02EF:  SUBLW  03
02F0:  BTFSS  03.2
02F1:  GOTO   2FB
....................    menu=4; 
02F2:  MOVLW  04
02F3:  MOVWF  34
....................    delay_ms(1500); 
02F4:  MOVLW  06
02F5:  MOVWF  3A
02F6:  MOVLW  FA
02F7:  MOVWF  3B
02F8:  CALL   0E9
02F9:  DECFSZ 3A,F
02FA:  GOTO   2F6
....................    } 
....................     if((input(pin_b3)==0)&&(menu==2)){ 
02FB:  BSF    03.5
02FC:  BSF    06.3
02FD:  BCF    03.5
02FE:  BTFSC  06.3
02FF:  GOTO   30D
0300:  MOVF   34,W
0301:  SUBLW  02
0302:  BTFSS  03.2
0303:  GOTO   30D
....................    menu=3; 
0304:  MOVLW  03
0305:  MOVWF  34
....................    delay_ms(1500); 
0306:  MOVLW  06
0307:  MOVWF  3A
0308:  MOVLW  FA
0309:  MOVWF  3B
030A:  CALL   0E9
030B:  DECFSZ 3A,F
030C:  GOTO   308
....................    } 
....................        
....................    if((input(pin_b3)==0)&&(menu==1)){ 
030D:  BSF    03.5
030E:  BSF    06.3
030F:  BCF    03.5
0310:  BTFSC  06.3
0311:  GOTO   31D
0312:  DECFSZ 34,W
0313:  GOTO   31D
....................    menu=2; 
0314:  MOVLW  02
0315:  MOVWF  34
....................    delay_ms(1500); 
0316:  MOVLW  06
0317:  MOVWF  3A
0318:  MOVLW  FA
0319:  MOVWF  3B
031A:  CALL   0E9
031B:  DECFSZ 3A,F
031C:  GOTO   318
....................    } 
....................     
....................      if((input(pin_b3)==0)&&(menu==0)){ 
031D:  BSF    03.5
031E:  BSF    06.3
031F:  BCF    03.5
0320:  BTFSC  06.3
0321:  GOTO   32E
0322:  MOVF   34,F
0323:  BTFSS  03.2
0324:  GOTO   32E
....................    menu=1; 
0325:  MOVLW  01
0326:  MOVWF  34
....................    delay_ms(1500); 
0327:  MOVLW  06
0328:  MOVWF  3A
0329:  MOVLW  FA
032A:  MOVWF  3B
032B:  CALL   0E9
032C:  DECFSZ 3A,F
032D:  GOTO   329
....................    } 
....................     
....................    switch (menu){ 
032E:  MOVF   34,W
032F:  XORLW  01
0330:  BTFSC  03.2
0331:  GOTO   33C
0332:  XORLW  03
0333:  BTFSC  03.2
0334:  GOTO   38E
0335:  XORLW  01
0336:  BTFSC  03.2
0337:  GOTO   3C8
0338:  XORLW  07
0339:  BTFSC  03.2
033A:  GOTO   43B
033B:  GOTO   49A
....................       case 1: 
....................       printf(lcd_putc,"\fAjuste de tensao"); 
033C:  CLRF   3A
033D:  MOVF   3A,W
033E:  CALL   029
033F:  INCF   3A,F
0340:  MOVWF  77
0341:  MOVWF  3E
0342:  CALL   166
0343:  MOVLW  11
0344:  SUBWF  3A,W
0345:  BTFSS  03.2
0346:  GOTO   33D
....................       printf(lcd_putc,"\nVoltagem:%u",definida); 
0347:  CLRF   3A
0348:  MOVF   3A,W
0349:  CALL   03F
034A:  INCF   3A,F
034B:  MOVWF  77
034C:  MOVWF  3E
034D:  CALL   166
034E:  MOVLW  0A
034F:  SUBWF  3A,W
0350:  BTFSS  03.2
0351:  GOTO   348
0352:  MOVF   30,W
0353:  MOVWF  3C
0354:  MOVLW  1B
0355:  MOVWF  3D
0356:  CALL   1B2
....................       restart_wdt(); 
0357:  CLRWDT
....................       if((input(pin_b4)==0)&&(definida<256)){ 
0358:  BSF    03.5
0359:  BSF    06.4
035A:  BCF    03.5
035B:  BTFSC  06.4
035C:  GOTO   35F
....................       definida=definida+1; 
035D:  MOVLW  01
035E:  ADDWF  30,F
....................        } 
....................         
....................        if((input(pin_b5)==0)&&(definida>1)){ 
035F:  BSF    03.5
0360:  BSF    06.5
0361:  BCF    03.5
0362:  BTFSC  06.5
0363:  GOTO   36A
0364:  MOVF   30,W
0365:  SUBLW  01
0366:  BTFSC  03.0
0367:  GOTO   36A
....................        definida=definida-1; 
0368:  MOVLW  01
0369:  SUBWF  30,F
....................        } 
....................        write_eeprom(0,definida); 
036A:  BSF    03.6
036B:  CLRF   0D
036C:  BCF    03.6
036D:  MOVF   30,W
036E:  BSF    03.6
036F:  MOVWF  0C
0370:  BSF    03.5
0371:  BCF    0C.7
0372:  BSF    0C.2
0373:  BCF    03.5
0374:  BCF    03.6
0375:  MOVF   0B,W
0376:  MOVWF  77
0377:  BCF    0B.7
0378:  BSF    03.5
0379:  BSF    03.6
037A:  MOVLW  55
037B:  MOVWF  0D
037C:  MOVLW  AA
037D:  MOVWF  0D
037E:  BSF    0C.1
037F:  BTFSC  0C.1
0380:  GOTO   37F
0381:  BCF    0C.2
0382:  MOVF   77,W
0383:  BCF    03.5
0384:  BCF    03.6
0385:  IORWF  0B,F
....................        delay_ms(1000);     
0386:  MOVLW  04
0387:  MOVWF  3A
0388:  MOVLW  FA
0389:  MOVWF  3B
038A:  CALL   0E9
038B:  DECFSZ 3A,F
038C:  GOTO   388
....................        break; 
038D:  GOTO   4BD
....................        
....................        case 2: 
....................       printf(lcd_putc,"\fAjuste histerese"); 
038E:  CLRF   3A
038F:  MOVF   3A,W
0390:  CALL   050
0391:  INCF   3A,F
0392:  MOVWF  77
0393:  MOVWF  3E
0394:  CALL   166
0395:  MOVLW  11
0396:  SUBWF  3A,W
0397:  BTFSS  03.2
0398:  GOTO   38F
....................       printf(lcd_putc,"\nVolts:%u",histerese); 
0399:  CLRF   3A
039A:  MOVF   3A,W
039B:  CALL   066
039C:  INCF   3A,F
039D:  MOVWF  77
039E:  MOVWF  3E
039F:  CALL   166
03A0:  MOVLW  07
03A1:  SUBWF  3A,W
03A2:  BTFSS  03.2
03A3:  GOTO   39A
03A4:  MOVF   2F,W
03A5:  MOVWF  3C
03A6:  MOVLW  1B
03A7:  MOVWF  3D
03A8:  CALL   1B2
....................        restart_wdt(); 
03A9:  CLRWDT
....................        if((input(pin_b4)==0)&&(histerese<50)){ 
03AA:  BSF    03.5
03AB:  BSF    06.4
03AC:  BCF    03.5
03AD:  BTFSC  06.4
03AE:  GOTO   3B5
03AF:  MOVF   2F,W
03B0:  SUBLW  31
03B1:  BTFSS  03.0
03B2:  GOTO   3B5
....................        histerese=histerese+1; 
03B3:  MOVLW  01
03B4:  ADDWF  2F,F
....................        } 
....................         
....................        if((input(pin_b5)==0)&&(histerese>1)){ 
03B5:  BSF    03.5
03B6:  BSF    06.5
03B7:  BCF    03.5
03B8:  BTFSC  06.5
03B9:  GOTO   3C0
03BA:  MOVF   2F,W
03BB:  SUBLW  01
03BC:  BTFSC  03.0
03BD:  GOTO   3C0
....................        histerese=histerese-1; 
03BE:  MOVLW  01
03BF:  SUBWF  2F,F
....................        } 
....................        delay_ms(1000);   
03C0:  MOVLW  04
03C1:  MOVWF  3A
03C2:  MOVLW  FA
03C3:  MOVWF  3B
03C4:  CALL   0E9
03C5:  DECFSZ 3A,F
03C6:  GOTO   3C2
....................        break; 
03C7:  GOTO   4BD
....................         
....................        case 3: 
....................       printf(lcd_putc,"\fTeste de saida"); 
03C8:  CLRF   3A
03C9:  MOVF   3A,W
03CA:  CALL   074
03CB:  INCF   3A,F
03CC:  MOVWF  77
03CD:  MOVWF  3E
03CE:  CALL   166
03CF:  MOVLW  0F
03D0:  SUBWF  3A,W
03D1:  BTFSS  03.2
03D2:  GOTO   3C9
....................       printf(lcd_putc,"\nVolts:%u",histerese); 
03D3:  CLRF   3A
03D4:  MOVF   3A,W
03D5:  CALL   066
03D6:  INCF   3A,F
03D7:  MOVWF  77
03D8:  MOVWF  3E
03D9:  CALL   166
03DA:  MOVLW  07
03DB:  SUBWF  3A,W
03DC:  BTFSS  03.2
03DD:  GOTO   3D4
03DE:  MOVF   2F,W
03DF:  MOVWF  3C
03E0:  MOVLW  1B
03E1:  MOVWF  3D
03E2:  CALL   1B2
....................       
....................         
....................        while(input(pin_b5)==0){ 
03E3:  BSF    03.5
03E4:  BSF    06.5
03E5:  BCF    03.5
03E6:  BTFSC  06.5
03E7:  GOTO   3FC
....................        output_high(pin_a2); 
03E8:  BSF    03.5
03E9:  BCF    05.2
03EA:  BCF    03.5
03EB:  BSF    05.2
....................        output_low(pin_a1); 
03EC:  BSF    03.5
03ED:  BCF    05.1
03EE:  BCF    03.5
03EF:  BCF    05.1
....................        printf(lcd_putc,"\nDesce"); 
03F0:  CLRF   3A
03F1:  MOVF   3A,W
03F2:  CALL   088
03F3:  INCF   3A,F
03F4:  MOVWF  77
03F5:  MOVWF  3E
03F6:  CALL   166
03F7:  MOVLW  06
03F8:  SUBWF  3A,W
03F9:  BTFSS  03.2
03FA:  GOTO   3F1
....................         
....................        } 
03FB:  GOTO   3E3
....................        while(input(pin_b4)==0){ 
03FC:  BSF    03.5
03FD:  BSF    06.4
03FE:  BCF    03.5
03FF:  BTFSC  06.4
0400:  GOTO   415
....................        output_high(pin_a1); 
0401:  BSF    03.5
0402:  BCF    05.1
0403:  BCF    03.5
0404:  BSF    05.1
....................        output_low(pin_a2); 
0405:  BSF    03.5
0406:  BCF    05.2
0407:  BCF    03.5
0408:  BCF    05.2
....................        printf(lcd_putc,"\nSobe "); 
0409:  CLRF   3A
040A:  MOVF   3A,W
040B:  CALL   093
040C:  INCF   3A,F
040D:  MOVWF  77
040E:  MOVWF  3E
040F:  CALL   166
0410:  MOVLW  06
0411:  SUBWF  3A,W
0412:  BTFSS  03.2
0413:  GOTO   40A
....................         
....................        } 
0414:  GOTO   3FC
....................         
....................       restart_wdt();           
0415:  CLRWDT
....................        write_eeprom(1,histerese); 
0416:  MOVLW  01
0417:  BSF    03.6
0418:  MOVWF  0D
0419:  BCF    03.6
041A:  MOVF   2F,W
041B:  BSF    03.6
041C:  MOVWF  0C
041D:  BSF    03.5
041E:  BCF    0C.7
041F:  BSF    0C.2
0420:  BCF    03.5
0421:  BCF    03.6
0422:  MOVF   0B,W
0423:  MOVWF  77
0424:  BCF    0B.7
0425:  BSF    03.5
0426:  BSF    03.6
0427:  MOVLW  55
0428:  MOVWF  0D
0429:  MOVLW  AA
042A:  MOVWF  0D
042B:  BSF    0C.1
042C:  BTFSC  0C.1
042D:  GOTO   42C
042E:  BCF    0C.2
042F:  MOVF   77,W
0430:  BCF    03.5
0431:  BCF    03.6
0432:  IORWF  0B,F
....................        delay_ms(1000);     
0433:  MOVLW  04
0434:  MOVWF  3A
0435:  MOVLW  FA
0436:  MOVWF  3B
0437:  CALL   0E9
0438:  DECFSZ 3A,F
0439:  GOTO   435
....................       break; 
043A:  GOTO   4BD
....................        
....................       case 4: 
....................       f_retardo=retardo*10; 
043B:  MOVF   35,W
043C:  MOVWF  3A
043D:  MOVLW  0A
043E:  MOVWF  3B
043F:  GOTO   1E7
0440:  CLRF   38
0441:  MOVF   78,W
0442:  MOVWF  37
....................       printf(lcd_putc,"\fTempo de retardo"); 
0443:  CLRF   3A
0444:  MOVF   3A,W
0445:  CALL   09E
0446:  INCF   3A,F
0447:  MOVWF  77
0448:  MOVWF  3E
0449:  CALL   166
044A:  MOVLW  11
044B:  SUBWF  3A,W
044C:  BTFSS  03.2
044D:  GOTO   444
....................       printf(lcd_putc,"\nMsegundos:%u",retardo); 
044E:  CLRF   3A
044F:  MOVF   3A,W
0450:  CALL   0B4
0451:  INCF   3A,F
0452:  MOVWF  77
0453:  MOVWF  3E
0454:  CALL   166
0455:  MOVLW  0B
0456:  SUBWF  3A,W
0457:  BTFSS  03.2
0458:  GOTO   44F
0459:  MOVF   35,W
045A:  MOVWF  3C
045B:  MOVLW  1B
045C:  MOVWF  3D
045D:  CALL   1B2
....................       if((input(pin_b4)==0)&&(retardo<250)){ 
045E:  BSF    03.5
045F:  BSF    06.4
0460:  BCF    03.5
0461:  BTFSC  06.4
0462:  GOTO   469
0463:  MOVF   35,W
0464:  SUBLW  F9
0465:  BTFSS  03.0
0466:  GOTO   469
....................        retardo=retardo+20; 
0467:  MOVLW  14
0468:  ADDWF  35,F
....................        } 
....................         
....................        if((input(pin_b5)==0)&&(retardo>20)){ 
0469:  BSF    03.5
046A:  BSF    06.5
046B:  BCF    03.5
046C:  BTFSC  06.5
046D:  GOTO   474
046E:  MOVF   35,W
046F:  SUBLW  14
0470:  BTFSC  03.0
0471:  GOTO   474
....................        retardo=retardo-20; 
0472:  MOVLW  14
0473:  SUBWF  35,F
....................        } 
....................       restart_wdt();           
0474:  CLRWDT
....................       write_eeprom(2,retardo); 
0475:  MOVLW  02
0476:  BSF    03.6
0477:  MOVWF  0D
0478:  BCF    03.6
0479:  MOVF   35,W
047A:  BSF    03.6
047B:  MOVWF  0C
047C:  BSF    03.5
047D:  BCF    0C.7
047E:  BSF    0C.2
047F:  BCF    03.5
0480:  BCF    03.6
0481:  MOVF   0B,W
0482:  MOVWF  77
0483:  BCF    0B.7
0484:  BSF    03.5
0485:  BSF    03.6
0486:  MOVLW  55
0487:  MOVWF  0D
0488:  MOVLW  AA
0489:  MOVWF  0D
048A:  BSF    0C.1
048B:  BTFSC  0C.1
048C:  GOTO   48B
048D:  BCF    0C.2
048E:  MOVF   77,W
048F:  BCF    03.5
0490:  BCF    03.6
0491:  IORWF  0B,F
....................       delay_ms(1000); 
0492:  MOVLW  04
0493:  MOVWF  3A
0494:  MOVLW  FA
0495:  MOVWF  3B
0496:  CALL   0E9
0497:  DECFSZ 3A,F
0498:  GOTO   494
....................       break; 
0499:  GOTO   4BD
....................        
....................      default:    
....................      printf(lcd_putc,"\f(V) Definida:%u\n(V) Atual :%u",definida,lida); 
049A:  CLRF   3A
049B:  MOVF   3A,W
049C:  CALL   0C6
049D:  INCF   3A,F
049E:  MOVWF  77
049F:  MOVWF  3E
04A0:  CALL   166
04A1:  MOVLW  0E
04A2:  SUBWF  3A,W
04A3:  BTFSS  03.2
04A4:  GOTO   49B
04A5:  MOVF   30,W
04A6:  MOVWF  3C
04A7:  MOVLW  1B
04A8:  MOVWF  3D
04A9:  CALL   1B2
04AA:  MOVLW  10
04AB:  MOVWF  3B
04AC:  MOVF   3B,W
04AD:  CALL   0C6
04AE:  INCF   3B,F
04AF:  MOVWF  77
04B0:  MOVWF  3E
04B1:  CALL   166
04B2:  MOVLW  1C
04B3:  SUBWF  3B,W
04B4:  BTFSS  03.2
04B5:  GOTO   4AC
04B6:  MOVF   31,W
04B7:  MOVWF  3C
04B8:  MOVLW  1B
04B9:  MOVWF  3D
04BA:  CALL   1B2
....................      menu=0; 
04BB:  CLRF   34
....................      break; 
04BC:  GOTO   4BD
....................   } 
....................     
....................     if(lida>Vmin){ 
04BD:  MOVF   31,W
04BE:  SUBWF  32,W
04BF:  BTFSC  03.0
04C0:  GOTO   4E8
....................     t_retardo= t_retardo+10; 
04C1:  MOVLW  0A
04C2:  ADDWF  36,F
....................     if(t_retardo>retardo){ 
04C3:  MOVF   36,W
04C4:  SUBWF  35,W
04C5:  BTFSC  03.0
04C6:  GOTO   4E7
....................     t_retardo=retardo; 
04C7:  MOVF   35,W
04C8:  MOVWF  36
....................       if((lida+histerese)<definida){ 
04C9:  MOVF   2F,W
04CA:  ADDWF  31,W
04CB:  SUBWF  30,W
04CC:  BTFSC  03.2
04CD:  GOTO   4D5
04CE:  BTFSS  03.0
04CF:  GOTO   4D5
....................       output_high(pin_a2); 
04D0:  BSF    03.5
04D1:  BCF    05.2
04D2:  BCF    03.5
04D3:  BSF    05.2
....................       } else output_low(pin_a2); 
04D4:  GOTO   4D9
04D5:  BSF    03.5
04D6:  BCF    05.2
04D7:  BCF    03.5
04D8:  BCF    05.2
....................        
....................         if((lida+histerese)>definida){ 
04D9:  MOVF   2F,W
04DA:  ADDWF  31,W
04DB:  SUBWF  30,W
04DC:  BTFSC  03.0
04DD:  GOTO   4E3
....................       output_high(pin_a1); 
04DE:  BSF    03.5
04DF:  BCF    05.1
04E0:  BCF    03.5
04E1:  BSF    05.1
....................       } else output_low(pin_a1); 
04E2:  GOTO   4E7
04E3:  BSF    03.5
04E4:  BCF    05.1
04E5:  BCF    03.5
04E6:  BCF    05.1
....................     } 
....................     } 
....................     else { 
04E7:  GOTO   4F1
....................     t_retardo=0; 
04E8:  CLRF   36
....................     output_low(pin_a2); 
04E9:  BSF    03.5
04EA:  BCF    05.2
04EB:  BCF    03.5
04EC:  BCF    05.2
....................     output_low(pin_a1); 
04ED:  BSF    03.5
04EE:  BCF    05.1
04EF:  BCF    03.5
04F0:  BCF    05.1
....................     } 
....................      
....................    delay_ms(200); 
04F1:  MOVLW  C8
04F2:  MOVWF  3B
04F3:  CALL   0E9
....................      
....................    } 
04F4:  GOTO   291
....................     
.................... } 
....................  
....................  
04F5:  SLEEP

Configuration Fuses:
   Word  1: 3F76   HS WDT PUT NODEBUG NOPROTECT BROWNOUT NOLVP NOCPD NOWRT

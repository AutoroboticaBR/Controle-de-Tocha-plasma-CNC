CCS PCM C Compiler, Version 4.074, 38112               24-nov-17 21:36

               Filename: C:\Users\Raulstar\Google Drive\THC\THC 2.lst

               ROM used: 1053 words (13%)
                         Largest free fragment is 2048
               RAM used: 15 (4%) at main() level
                         27 (8%) worst case
               Stack:    4 locations

*
0000:  NOP
0001:  MOVLW  00
0002:  MOVWF  0A
0003:  GOTO   23D
.................... #include <16f877a.h> 
.................... //////// Standard Header file for the PIC16F877A device //////////////// 
.................... #device PIC16F877A 
.................... #list 
....................  
.................... #use delay(clock=1600000) 
*
0089:  MOVLW  2C
008A:  MOVWF  04
008B:  BCF    03.7
008C:  MOVF   00,W
008D:  BTFSC  03.2
008E:  GOTO   095
008F:  MOVLW  84
0090:  MOVWF  77
0091:  DECFSZ 77,F
0092:  GOTO   091
0093:  DECFSZ 00,F
0094:  GOTO   08F
0095:  RETLW  00
.................... #fuses hs 
.................... #FUSES PUT    
.................... #include <lcd.c> 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////                             LCDD.C                                //// 
.................... ////                 Driver for common LCD modules                     //// 
.................... ////                                                                   //// 
.................... ////  lcd_init()   Must be called before any other function.           //// 
.................... ////                                                                   //// 
.................... ////  lcd_putc(c)  Will display c on the next position of the LCD.     //// 
.................... ////                     The following have special meaning:           //// 
.................... ////                      \f  Clear display                            //// 
.................... ////                      \n  Go to start of second line               //// 
.................... ////                      \b  Move back one position                   //// 
.................... ////                                                                   //// 
.................... ////  lcd_gotoxy(x,y) Set write position on LCD (upper left is 1,1)    //// 
.................... ////                                                                   //// 
.................... ////  lcd_getc(x,y)   Returns character at position x,y on LCD         //// 
.................... ////                                                                   //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2007 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... // As defined in the following structure the pin connection is as follows: 
.................... //     D0  enable 
.................... //     D1  rs 
.................... //     D2  rw 
.................... //     D4  D4 
.................... //     D5  D5 
.................... //     D6  D6 
.................... //     D7  D7 
.................... // 
.................... //   LCD pins D0-D3 are not used and PIC D3 is not used. 
....................  
.................... // Un-comment the following define to use port B 
.................... // #define use_portb_lcd TRUE 
....................  
....................  
.................... struct lcd_pin_map {                 // This structure is overlayed 
....................            BOOLEAN enable;           // on to an I/O port to gain 
....................            BOOLEAN rs;               // access to the LCD pins. 
....................            BOOLEAN rw;               // The bits are allocated from 
....................            BOOLEAN unused;           // low order up.  ENABLE will 
....................            int     data : 4;         // be pin B0. 
....................         } lcd; 
....................  
....................  
.................... #if defined use_portb_lcd 
....................    //#locate lcd = getenv("sfr:PORTB")    // This puts the entire structure over the port 
....................    #ifdef __pch__ 
....................     #locate lcd = 0xf81 
....................    #else 
....................     #locate lcd = 6 
....................    #endif 
....................    #define set_tris_lcd(x) set_tris_b(x) 
.................... #else 
....................    //#locate lcd = getenv("sfr:PORTD")    // This puts the entire structure over the port 
....................    #ifdef __pch__ 
....................     #locate lcd = 0xf83 
....................    #else 
....................     #locate lcd = 8 
....................    #endif 
....................    #define set_tris_lcd(x) set_tris_d(x) 
.................... #endif 
....................  
.................... #ifndef lcd_type 
.................... #define lcd_type 2           // 0=5x7, 1=5x10, 2=2 lines 
.................... #endif 
....................  
.................... #define lcd_line_two 0x40    // LCD RAM address for the second line 
....................  
....................  
.................... BYTE const LCD_INIT_STRING[4] = {0x20 | (lcd_type << 2), 0xc, 1, 6}; 
....................                              // These bytes need to be sent to the LCD 
....................                              // to start it up. 
....................  
....................  
....................                              // The following are used for setting 
....................                              // the I/O port direction register. 
....................  
.................... struct lcd_pin_map const LCD_WRITE = {0,0,0,0,0}; // For write mode all pins are out 
.................... struct lcd_pin_map const LCD_READ = {0,0,0,0,15}; // For read mode data pins are in 
....................  
....................  
....................  
.................... BYTE lcd_read_byte() { 
....................       BYTE low,high; 
....................       set_tris_lcd(LCD_READ); 
*
00A2:  MOVLW  F0
00A3:  BSF    03.5
00A4:  MOVWF  08
....................       lcd.rw = 1; 
00A5:  BCF    03.5
00A6:  BSF    08.2
....................       delay_cycles(1); 
00A7:  NOP
....................       lcd.enable = 1; 
00A8:  BSF    08.0
....................       delay_cycles(1); 
00A9:  NOP
....................       high = lcd.data; 
00AA:  MOVF   08,W
00AB:  SWAPF  08,W
00AC:  ANDLW  0F
00AD:  MOVWF  33
....................       lcd.enable = 0; 
00AE:  BCF    08.0
....................       delay_cycles(1); 
00AF:  NOP
....................       lcd.enable = 1; 
00B0:  BSF    08.0
....................       delay_us(1); 
....................       low = lcd.data; 
00B1:  MOVF   08,W
00B2:  SWAPF  08,W
00B3:  ANDLW  0F
00B4:  MOVWF  32
....................       lcd.enable = 0; 
00B5:  BCF    08.0
....................       set_tris_lcd(LCD_WRITE); 
00B6:  MOVLW  00
00B7:  BSF    03.5
00B8:  MOVWF  08
....................       return( (high<<4) | low); 
00B9:  BCF    03.5
00BA:  SWAPF  33,W
00BB:  MOVWF  77
00BC:  MOVLW  F0
00BD:  ANDWF  77,F
00BE:  MOVF   77,W
00BF:  IORWF  32,W
00C0:  MOVWF  78
.................... } 
....................  
....................  
.................... void lcd_send_nibble( BYTE n ) { 
....................       lcd.data = n; 
*
0096:  SWAPF  33,W
0097:  ANDLW  F0
0098:  MOVWF  77
0099:  MOVLW  0F
009A:  ANDWF  08,W
009B:  IORWF  77,W
009C:  MOVWF  08
....................       delay_cycles(1); 
009D:  NOP
....................       lcd.enable = 1; 
009E:  BSF    08.0
....................       delay_us(2); 
....................       lcd.enable = 0; 
009F:  BCF    08.0
.................... } 
00A0:  RETLW  00
....................  
....................  
.................... void lcd_send_byte( BYTE address, BYTE n ) { 
....................  
....................       lcd.rs = 0; 
00A1:  BCF    08.1
....................       while ( bit_test(lcd_read_byte(),7) ) ; 
*
00C1:  MOVF   78,W
00C2:  MOVWF  32
00C3:  BTFSC  32.7
00C4:  GOTO   0A2
....................       lcd.rs = address; 
00C5:  BTFSS  30.0
00C6:  BCF    08.1
00C7:  BTFSC  30.0
00C8:  BSF    08.1
....................       delay_cycles(1); 
00C9:  NOP
....................       lcd.rw = 0; 
00CA:  BCF    08.2
....................       delay_cycles(1); 
00CB:  NOP
....................       lcd.enable = 0; 
00CC:  BCF    08.0
....................       lcd_send_nibble(n >> 4); 
00CD:  SWAPF  31,W
00CE:  MOVWF  32
00CF:  MOVLW  0F
00D0:  ANDWF  32,F
00D1:  MOVF   32,W
00D2:  MOVWF  33
00D3:  CALL   096
....................       lcd_send_nibble(n & 0xf); 
00D4:  MOVF   31,W
00D5:  ANDLW  0F
00D6:  MOVWF  32
00D7:  MOVWF  33
00D8:  CALL   096
.................... } 
00D9:  RETLW  00
....................  
....................  
.................... void lcd_init() { 
....................     BYTE i; 
....................     set_tris_lcd(LCD_WRITE); 
00DA:  MOVLW  00
00DB:  BSF    03.5
00DC:  MOVWF  08
....................     lcd.rs = 0; 
00DD:  BCF    03.5
00DE:  BCF    08.1
....................     lcd.rw = 0; 
00DF:  BCF    08.2
....................     lcd.enable = 0; 
00E0:  BCF    08.0
....................     delay_ms(15); 
00E1:  MOVLW  0F
00E2:  MOVWF  2C
00E3:  CALL   089
....................     for(i=1;i<=3;++i) { 
00E4:  MOVLW  01
00E5:  MOVWF  27
00E6:  MOVF   27,W
00E7:  SUBLW  03
00E8:  BTFSS  03.0
00E9:  GOTO   0F2
....................        lcd_send_nibble(3); 
00EA:  MOVLW  03
00EB:  MOVWF  33
00EC:  CALL   096
....................        delay_ms(5); 
00ED:  MOVLW  05
00EE:  MOVWF  2C
00EF:  CALL   089
....................     } 
00F0:  INCF   27,F
00F1:  GOTO   0E6
....................     lcd_send_nibble(2); 
00F2:  MOVLW  02
00F3:  MOVWF  33
00F4:  CALL   096
....................     for(i=0;i<=3;++i) 
00F5:  CLRF   27
00F6:  MOVF   27,W
00F7:  SUBLW  03
00F8:  BTFSS  03.0
00F9:  GOTO   103
....................        lcd_send_byte(0,LCD_INIT_STRING[i]); 
00FA:  MOVF   27,W
00FB:  CALL   004
00FC:  MOVWF  28
00FD:  CLRF   30
00FE:  MOVF   28,W
00FF:  MOVWF  31
0100:  CALL   0A1
0101:  INCF   27,F
0102:  GOTO   0F6
.................... } 
0103:  BCF    0A.3
0104:  BCF    0A.4
0105:  GOTO   26D (RETURN)
....................  
....................  
.................... void lcd_gotoxy( BYTE x, BYTE y) { 
....................    BYTE address; 
....................  
....................    if(y!=1) 
*
011D:  DECFSZ 2D,W
011E:  GOTO   120
011F:  GOTO   123
....................      address=lcd_line_two; 
0120:  MOVLW  40
0121:  MOVWF  2E
....................    else 
0122:  GOTO   124
....................      address=0; 
0123:  CLRF   2E
....................    address+=x-1; 
0124:  MOVLW  01
0125:  SUBWF  2C,W
0126:  ADDWF  2E,F
....................    lcd_send_byte(0,0x80|address); 
0127:  MOVF   2E,W
0128:  IORLW  80
0129:  MOVWF  2F
012A:  CLRF   30
012B:  MOVF   2F,W
012C:  MOVWF  31
012D:  CALL   0A1
012E:  NOP
.................... } 
....................  
.................... void lcd_putc( char c) { 
....................    switch (c) { 
*
0106:  MOVF   2B,W
0107:  XORLW  0C
0108:  BTFSC  03.2
0109:  GOTO   111
010A:  XORLW  06
010B:  BTFSC  03.2
010C:  GOTO   119
010D:  XORLW  02
010E:  BTFSC  03.2
010F:  GOTO   130
0110:  GOTO   135
....................      case '\f'   : lcd_send_byte(0,1); 
0111:  CLRF   30
0112:  MOVLW  01
0113:  MOVWF  31
0114:  CALL   0A1
....................                    delay_ms(2); 
0115:  MOVLW  02
0116:  MOVWF  2C
0117:  CALL   089
....................                                            break; 
0118:  GOTO   13B
....................      case '\n'   : lcd_gotoxy(1,2);        break; 
0119:  MOVLW  01
011A:  MOVWF  2C
011B:  MOVLW  02
011C:  MOVWF  2D
*
012F:  GOTO   13B
....................      case '\b'   : lcd_send_byte(0,0x10);  break; 
0130:  CLRF   30
0131:  MOVLW  10
0132:  MOVWF  31
0133:  CALL   0A1
0134:  GOTO   13B
....................      default     : lcd_send_byte(1,c);     break; 
0135:  MOVLW  01
0136:  MOVWF  30
0137:  MOVF   2B,W
0138:  MOVWF  31
0139:  CALL   0A1
013A:  GOTO   13B
....................    } 
.................... } 
013B:  RETLW  00
....................  
.................... char lcd_getc( BYTE x, BYTE y) { 
....................    char value; 
....................  
....................     lcd_gotoxy(x,y); 
....................     while ( bit_test(lcd_read_byte(),7) ); // wait until busy flag is low 
....................     lcd.rs=1; 
....................     value = lcd_read_byte(); 
....................     lcd.rs=0; 
....................     return(value); 
.................... } 
....................  
.................... #FUSES WDT 
....................  
.................... int histerese=5; 
*
0248:  MOVLW  05
0249:  BCF    03.5
024A:  MOVWF  20
.................... int definida; 
.................... int lida=0; 
024B:  CLRF   22
.................... Int Vmin=25; 
024C:  MOVLW  19
024D:  MOVWF  23
.................... int temp=0; 
024E:  CLRF   24
.................... int menu=0; 
024F:  CLRF   25
....................  
....................  
....................  
.................... void main(){ 
*
023D:  CLRF   04
023E:  BCF    03.7
023F:  MOVLW  1F
0240:  ANDWF  03,F
0241:  BSF    03.5
0242:  BSF    1F.0
0243:  BSF    1F.1
0244:  BSF    1F.2
0245:  BCF    1F.3
0246:  MOVLW  07
0247:  MOVWF  1C
....................     
....................    setup_adc_ports(AN0_AN1_AN3); 
*
0252:  BSF    03.5
0253:  BCF    1F.0
0254:  BCF    1F.1
0255:  BSF    1F.2
0256:  BCF    1F.3
....................    setup_adc(ADC_CLOCK_DIV_32);    
0257:  BCF    1F.6
0258:  BCF    03.5
0259:  BCF    1F.6
025A:  BSF    1F.7
025B:  BSF    03.5
025C:  BCF    1F.7
025D:  BCF    03.5
025E:  BSF    1F.0
....................    setup_comparator(NC_NC_NC_NC); 
025F:  MOVLW  07
0260:  BSF    03.5
0261:  MOVWF  1C
0262:  MOVF   05,W
0263:  GOTO   264
0264:  GOTO   265
0265:  MOVF   1C,W
0266:  BCF    03.5
0267:  BCF    0D.6
....................    setup_vref(true); 
0268:  MOVLW  01
0269:  BSF    03.5
026A:  MOVWF  1D
....................    lcd_init(); 
026B:  BCF    03.5
026C:  GOTO   0DA
....................    setup_wdt(WDT_2304MS); 
026D:  MOVLW  0F
026E:  MOVWF  77
026F:  CLRF   01
0270:  MOVLW  81
0271:  MOVWF  04
0272:  BCF    03.7
0273:  MOVF   00,W
0274:  ANDLW  F0
0275:  IORLW  07
0276:  MOVWF  00
0277:  CLRWDT
0278:  MOVF   00,W
0279:  ANDLW  F7
027A:  BTFSC  77.3
027B:  ANDLW  F0
027C:  IORWF  77,W
027D:  MOVWF  00
....................    set_tris_c(0b11111111); 
027E:  MOVLW  FF
027F:  BSF    03.5
0280:  MOVWF  07
0281:  BCF    03.5
0282:  MOVWF  26
....................    set_tris_b(0b01111111); 
0283:  MOVLW  7F
0284:  BSF    03.5
0285:  MOVWF  06
....................    port_b_pullups(true); 
0286:  BCF    01.7
....................   // set_tris_a(0b11111111); 
....................    printf(lcd_putc,"\fRaul THC"); 
0287:  BCF    03.5
0288:  CLRF   27
0289:  MOVF   27,W
028A:  CALL   00C
028B:  INCF   27,F
028C:  MOVWF  77
028D:  MOVWF  2B
028E:  CALL   106
028F:  MOVLW  09
0290:  SUBWF  27,W
0291:  BTFSS  03.2
0292:  GOTO   289
....................    delay_ms(3000); 
0293:  MOVLW  0C
0294:  MOVWF  27
0295:  MOVLW  FA
0296:  MOVWF  2C
0297:  CALL   089
0298:  DECFSZ 27,F
0299:  GOTO   295
....................    definida=read_eeprom(0); 
029A:  BSF    03.6
029B:  CLRF   0D
029C:  BSF    03.5
029D:  BCF    0C.7
029E:  BSF    0C.0
029F:  BCF    03.5
02A0:  MOVF   0C,W
02A1:  BCF    03.6
02A2:  MOVWF  21
....................    histerese=read_eeprom(1); 
02A3:  MOVLW  01
02A4:  BSF    03.6
02A5:  MOVWF  0D
02A6:  BSF    03.5
02A7:  BCF    0C.7
02A8:  BSF    0C.0
02A9:  BCF    03.5
02AA:  MOVF   0C,W
02AB:  BCF    03.6
02AC:  MOVWF  20
....................     
....................    while(true){ 
....................    restart_wdt(); 
02AD:  CLRWDT
....................    set_adc_channel(0);    
02AE:  MOVLW  00
02AF:  MOVWF  78
02B0:  MOVF   1F,W
02B1:  ANDLW  C7
02B2:  IORWF  78,W
02B3:  MOVWF  1F
....................    temp=read_adc(); 
02B4:  BSF    1F.2
02B5:  BTFSC  1F.2
02B6:  GOTO   2B5
02B7:  MOVF   1E,W
02B8:  MOVWF  24
....................    temp=temp*0.5; 
02B9:  CLRF   28
02BA:  MOVF   24,W
02BB:  MOVWF  27
02BC:  GOTO   13C
02BD:  MOVF   7A,W
02BE:  MOVWF  2A
02BF:  MOVF   79,W
02C0:  MOVWF  29
02C1:  MOVF   78,W
02C2:  MOVWF  28
02C3:  MOVF   77,W
02C4:  MOVWF  27
02C5:  CLRF   2E
02C6:  CLRF   2D
02C7:  CLRF   2C
02C8:  MOVLW  7E
02C9:  MOVWF  2B
02CA:  GOTO   15B
02CB:  MOVF   7A,W
02CC:  MOVWF  2A
02CD:  MOVF   79,W
02CE:  MOVWF  29
02CF:  MOVF   78,W
02D0:  MOVWF  28
02D1:  MOVF   77,W
02D2:  MOVWF  27
02D3:  GOTO   1D2
02D4:  MOVF   78,W
02D5:  MOVWF  24
....................    lida=(lida+temp)/2; 
02D6:  MOVF   24,W
02D7:  ADDWF  22,W
02D8:  MOVWF  77
02D9:  BCF    03.0
02DA:  RRF    77,W
02DB:  MOVWF  22
....................    delay_ms(300);   
02DC:  MOVLW  02
02DD:  MOVWF  27
02DE:  MOVLW  96
02DF:  MOVWF  2C
02E0:  CALL   089
02E1:  DECFSZ 27,F
02E2:  GOTO   2DE
....................     
....................     if((input(pin_b3)==0)&&(menu==2)){ 
02E3:  BSF    03.5
02E4:  BSF    06.3
02E5:  BCF    03.5
02E6:  BTFSC  06.3
02E7:  GOTO   2F4
02E8:  MOVF   25,W
02E9:  SUBLW  02
02EA:  BTFSS  03.2
02EB:  GOTO   2F4
....................    menu=0; 
02EC:  CLRF   25
....................    delay_ms(1500); 
02ED:  MOVLW  06
02EE:  MOVWF  27
02EF:  MOVLW  FA
02F0:  MOVWF  2C
02F1:  CALL   089
02F2:  DECFSZ 27,F
02F3:  GOTO   2EF
....................    } 
....................     
....................     if((input(pin_b3)==0)&&(menu==1)){ 
02F4:  BSF    03.5
02F5:  BSF    06.3
02F6:  BCF    03.5
02F7:  BTFSC  06.3
02F8:  GOTO   304
02F9:  DECFSZ 25,W
02FA:  GOTO   304
....................    menu=2; 
02FB:  MOVLW  02
02FC:  MOVWF  25
....................    delay_ms(1500); 
02FD:  MOVLW  06
02FE:  MOVWF  27
02FF:  MOVLW  FA
0300:  MOVWF  2C
0301:  CALL   089
0302:  DECFSZ 27,F
0303:  GOTO   2FF
....................    } 
....................        
....................    if((input(pin_b3)==0)&&(menu==0)){ 
0304:  BSF    03.5
0305:  BSF    06.3
0306:  BCF    03.5
0307:  BTFSC  06.3
0308:  GOTO   315
0309:  MOVF   25,F
030A:  BTFSS  03.2
030B:  GOTO   315
....................    menu=1; 
030C:  MOVLW  01
030D:  MOVWF  25
....................    delay_ms(1500); 
030E:  MOVLW  06
030F:  MOVWF  27
0310:  MOVLW  FA
0311:  MOVWF  2C
0312:  CALL   089
0313:  DECFSZ 27,F
0314:  GOTO   310
....................    } 
....................     
....................    switch (menu){ 
0315:  MOVF   25,W
0316:  XORLW  01
0317:  BTFSC  03.2
0318:  GOTO   31D
0319:  XORLW  03
031A:  BTFSC  03.2
031B:  GOTO   36F
031C:  GOTO   3C6
....................       case 1: 
....................       printf(lcd_putc,"\fAjuste de tensao"); 
031D:  CLRF   27
031E:  MOVF   27,W
031F:  CALL   01A
0320:  INCF   27,F
0321:  MOVWF  77
0322:  MOVWF  2B
0323:  CALL   106
0324:  MOVLW  11
0325:  SUBWF  27,W
0326:  BTFSS  03.2
0327:  GOTO   31E
....................       printf(lcd_putc,"\nVoltagem:%u",definida); 
0328:  CLRF   27
0329:  MOVF   27,W
032A:  CALL   030
032B:  INCF   27,F
032C:  MOVWF  77
032D:  MOVWF  2B
032E:  CALL   106
032F:  MOVLW  0A
0330:  SUBWF  27,W
0331:  BTFSS  03.2
0332:  GOTO   329
0333:  MOVF   21,W
0334:  MOVWF  29
0335:  MOVLW  1B
0336:  MOVWF  2A
0337:  CALL   208
....................       restart_wdt(); 
0338:  CLRWDT
....................       if((input(pin_b4)==0)&&(definida<256)){ 
0339:  BSF    03.5
033A:  BSF    06.4
033B:  BCF    03.5
033C:  BTFSC  06.4
033D:  GOTO   340
....................       definida=definida+1; 
033E:  MOVLW  01
033F:  ADDWF  21,F
....................        } 
....................         
....................        if((input(pin_b5)==0)&&(definida>1)){ 
0340:  BSF    03.5
0341:  BSF    06.5
0342:  BCF    03.5
0343:  BTFSC  06.5
0344:  GOTO   34B
0345:  MOVF   21,W
0346:  SUBLW  01
0347:  BTFSC  03.0
0348:  GOTO   34B
....................        definida=definida-1; 
0349:  MOVLW  01
034A:  SUBWF  21,F
....................        } 
....................        write_eeprom(0,definida); 
034B:  BSF    03.6
034C:  CLRF   0D
034D:  BCF    03.6
034E:  MOVF   21,W
034F:  BSF    03.6
0350:  MOVWF  0C
0351:  BSF    03.5
0352:  BCF    0C.7
0353:  BSF    0C.2
0354:  BCF    03.5
0355:  BCF    03.6
0356:  MOVF   0B,W
0357:  MOVWF  77
0358:  BCF    0B.7
0359:  BSF    03.5
035A:  BSF    03.6
035B:  MOVLW  55
035C:  MOVWF  0D
035D:  MOVLW  AA
035E:  MOVWF  0D
035F:  BSF    0C.1
0360:  BTFSC  0C.1
0361:  GOTO   360
0362:  BCF    0C.2
0363:  MOVF   77,W
0364:  BCF    03.5
0365:  BCF    03.6
0366:  IORWF  0B,F
....................        delay_ms(1000);     
0367:  MOVLW  04
0368:  MOVWF  27
0369:  MOVLW  FA
036A:  MOVWF  2C
036B:  CALL   089
036C:  DECFSZ 27,F
036D:  GOTO   369
....................        break; 
036E:  GOTO   3E9
....................        
....................        case 2: 
....................       printf(lcd_putc,"\fAjuste histerese"); 
036F:  CLRF   27
0370:  MOVF   27,W
0371:  CALL   041
0372:  INCF   27,F
0373:  MOVWF  77
0374:  MOVWF  2B
0375:  CALL   106
0376:  MOVLW  11
0377:  SUBWF  27,W
0378:  BTFSS  03.2
0379:  GOTO   370
....................       printf(lcd_putc,"\nVolts:%u",histerese); 
037A:  CLRF   27
037B:  MOVF   27,W
037C:  CALL   057
037D:  INCF   27,F
037E:  MOVWF  77
037F:  MOVWF  2B
0380:  CALL   106
0381:  MOVLW  07
0382:  SUBWF  27,W
0383:  BTFSS  03.2
0384:  GOTO   37B
0385:  MOVF   20,W
0386:  MOVWF  29
0387:  MOVLW  1B
0388:  MOVWF  2A
0389:  CALL   208
....................        restart_wdt(); 
038A:  CLRWDT
....................        if((input(pin_b4)==0)&&(histerese<50)){ 
038B:  BSF    03.5
038C:  BSF    06.4
038D:  BCF    03.5
038E:  BTFSC  06.4
038F:  GOTO   396
0390:  MOVF   20,W
0391:  SUBLW  31
0392:  BTFSS  03.0
0393:  GOTO   396
....................        histerese=histerese+1; 
0394:  MOVLW  01
0395:  ADDWF  20,F
....................        } 
....................         
....................        if((input(pin_b5)==0)&&(histerese>1)){ 
0396:  BSF    03.5
0397:  BSF    06.5
0398:  BCF    03.5
0399:  BTFSC  06.5
039A:  GOTO   3A1
039B:  MOVF   20,W
039C:  SUBLW  01
039D:  BTFSC  03.0
039E:  GOTO   3A1
....................        histerese=histerese-1; 
039F:  MOVLW  01
03A0:  SUBWF  20,F
....................        } 
....................        write_eeprom(1,histerese); 
03A1:  MOVLW  01
03A2:  BSF    03.6
03A3:  MOVWF  0D
03A4:  BCF    03.6
03A5:  MOVF   20,W
03A6:  BSF    03.6
03A7:  MOVWF  0C
03A8:  BSF    03.5
03A9:  BCF    0C.7
03AA:  BSF    0C.2
03AB:  BCF    03.5
03AC:  BCF    03.6
03AD:  MOVF   0B,W
03AE:  MOVWF  77
03AF:  BCF    0B.7
03B0:  BSF    03.5
03B1:  BSF    03.6
03B2:  MOVLW  55
03B3:  MOVWF  0D
03B4:  MOVLW  AA
03B5:  MOVWF  0D
03B6:  BSF    0C.1
03B7:  BTFSC  0C.1
03B8:  GOTO   3B7
03B9:  BCF    0C.2
03BA:  MOVF   77,W
03BB:  BCF    03.5
03BC:  BCF    03.6
03BD:  IORWF  0B,F
....................        delay_ms(1000);     
03BE:  MOVLW  04
03BF:  MOVWF  27
03C0:  MOVLW  FA
03C1:  MOVWF  2C
03C2:  CALL   089
03C3:  DECFSZ 27,F
03C4:  GOTO   3C0
....................       break; 
03C5:  GOTO   3E9
....................        
....................       default:    
....................      printf(lcd_putc,"\f(V) Definida :%u\n(V) Atual :%u",definida,lida); 
03C6:  CLRF   27
03C7:  MOVF   27,W
03C8:  CALL   065
03C9:  INCF   27,F
03CA:  MOVWF  77
03CB:  MOVWF  2B
03CC:  CALL   106
03CD:  MOVLW  0F
03CE:  SUBWF  27,W
03CF:  BTFSS  03.2
03D0:  GOTO   3C7
03D1:  MOVF   21,W
03D2:  MOVWF  29
03D3:  MOVLW  1B
03D4:  MOVWF  2A
03D5:  CALL   208
03D6:  MOVLW  11
03D7:  MOVWF  28
03D8:  MOVF   28,W
03D9:  CALL   065
03DA:  INCF   28,F
03DB:  MOVWF  77
03DC:  MOVWF  2B
03DD:  CALL   106
03DE:  MOVLW  1D
03DF:  SUBWF  28,W
03E0:  BTFSS  03.2
03E1:  GOTO   3D8
03E2:  MOVF   22,W
03E3:  MOVWF  29
03E4:  MOVLW  1B
03E5:  MOVWF  2A
03E6:  CALL   208
....................      menu=0; 
03E7:  CLRF   25
....................      break; 
03E8:  GOTO   3E9
....................   } 
....................     
....................     if(lida>Vmin){ 
03E9:  MOVF   22,W
03EA:  SUBWF  23,W
03EB:  BTFSC  03.0
03EC:  GOTO   40C
....................       if((lida+histerese)<definida){ 
03ED:  MOVF   20,W
03EE:  ADDWF  22,W
03EF:  SUBWF  21,W
03F0:  BTFSC  03.2
03F1:  GOTO   3F9
03F2:  BTFSS  03.0
03F3:  GOTO   3F9
....................       output_high(pin_a2); 
03F4:  BSF    03.5
03F5:  BCF    05.2
03F6:  BCF    03.5
03F7:  BSF    05.2
....................       } else output_low(pin_a2); 
03F8:  GOTO   3FD
03F9:  BSF    03.5
03FA:  BCF    05.2
03FB:  BCF    03.5
03FC:  BCF    05.2
....................        
....................         if((lida+histerese)>definida){ 
03FD:  MOVF   20,W
03FE:  ADDWF  22,W
03FF:  SUBWF  21,W
0400:  BTFSC  03.0
0401:  GOTO   407
....................       output_high(pin_a1); 
0402:  BSF    03.5
0403:  BCF    05.1
0404:  BCF    03.5
0405:  BSF    05.1
....................       } else output_low(pin_a1); 
0406:  GOTO   40B
0407:  BSF    03.5
0408:  BCF    05.1
0409:  BCF    03.5
040A:  BCF    05.1
....................     }else { 
040B:  GOTO   414
....................     output_low(pin_a2); 
040C:  BSF    03.5
040D:  BCF    05.2
040E:  BCF    03.5
040F:  BCF    05.2
....................     output_low(pin_a1); 
0410:  BSF    03.5
0411:  BCF    05.1
0412:  BCF    03.5
0413:  BCF    05.1
....................     } 
....................      
....................    delay_ms(800); 
0414:  MOVLW  04
0415:  MOVWF  27
0416:  MOVLW  C8
0417:  MOVWF  2C
0418:  CALL   089
0419:  DECFSZ 27,F
041A:  GOTO   416
....................   
....................    
....................    
....................    } 
041B:  GOTO   2AD
....................     
.................... } 
....................  
....................  
041C:  GOTO   41C

Configuration Fuses:
   Word  1: 373A   HS NOWDT NOPUT DEBUG NOPROTECT NOBROWNOUT NOLVP NOCPD NOWRT

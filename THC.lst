CCS PCM C Compiler, Version 4.074, 38112               23-nov-17 15:17

               Filename: THC.lst

               ROM used: 864 words (11%)
                         Largest free fragment is 2048
               RAM used: 14 (4%) at main() level
                         33 (9%) worst case
               Stack:    4 locations

*
0000:  MOVLW  00
0001:  MOVWF  0A
0002:  GOTO   22D
0003:  NOP
.................... #include <16f877a.h> 
.................... //////// Standard Header file for the PIC16F877A device //////////////// 
.................... #device PIC16F877A 
.................... #list 
....................  
.................... #use delay(clock=1600000) 
*
0061:  MOVLW  32
0062:  MOVWF  04
0063:  BCF    03.7
0064:  MOVF   00,W
0065:  BTFSC  03.2
0066:  GOTO   06D
0067:  MOVLW  84
0068:  MOVWF  77
0069:  DECFSZ 77,F
006A:  GOTO   069
006B:  DECFSZ 00,F
006C:  GOTO   067
006D:  RETLW  00
.................... #fuses hs 
.................... #include <lcd.c> 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////                             LCDD.C                                //// 
.................... ////                 Driver for common LCD modules                     //// 
.................... ////                                                                   //// 
.................... ////  lcd_init()   Must be called before any other function.           //// 
.................... ////                                                                   //// 
.................... ////  lcd_putc(c)  Will display c on the next position of the LCD.     //// 
.................... ////                     The following have special meaning:           //// 
.................... ////                      \f  Clear display                            //// 
.................... ////                      \n  Go to start of second line               //// 
.................... ////                      \b  Move back one position                   //// 
.................... ////                                                                   //// 
.................... ////  lcd_gotoxy(x,y) Set write position on LCD (upper left is 1,1)    //// 
.................... ////                                                                   //// 
.................... ////  lcd_getc(x,y)   Returns character at position x,y on LCD         //// 
.................... ////                                                                   //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2007 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... // As defined in the following structure the pin connection is as follows: 
.................... //     D0  enable 
.................... //     D1  rs 
.................... //     D2  rw 
.................... //     D4  D4 
.................... //     D5  D5 
.................... //     D6  D6 
.................... //     D7  D7 
.................... // 
.................... //   LCD pins D0-D3 are not used and PIC D3 is not used. 
....................  
.................... // Un-comment the following define to use port B 
.................... // #define use_portb_lcd TRUE 
....................  
....................  
.................... struct lcd_pin_map {                 // This structure is overlayed 
....................            BOOLEAN enable;           // on to an I/O port to gain 
....................            BOOLEAN rs;               // access to the LCD pins. 
....................            BOOLEAN rw;               // The bits are allocated from 
....................            BOOLEAN unused;           // low order up.  ENABLE will 
....................            int     data : 4;         // be pin B0. 
....................         } lcd; 
....................  
....................  
.................... #if defined use_portb_lcd 
....................    //#locate lcd = getenv("sfr:PORTB")    // This puts the entire structure over the port 
....................    #ifdef __pch__ 
....................     #locate lcd = 0xf81 
....................    #else 
....................     #locate lcd = 6 
....................    #endif 
....................    #define set_tris_lcd(x) set_tris_b(x) 
.................... #else 
....................    //#locate lcd = getenv("sfr:PORTD")    // This puts the entire structure over the port 
....................    #ifdef __pch__ 
....................     #locate lcd = 0xf83 
....................    #else 
....................     #locate lcd = 8 
....................    #endif 
....................    #define set_tris_lcd(x) set_tris_d(x) 
.................... #endif 
....................  
.................... #ifndef lcd_type 
.................... #define lcd_type 2           // 0=5x7, 1=5x10, 2=2 lines 
.................... #endif 
....................  
.................... #define lcd_line_two 0x40    // LCD RAM address for the second line 
....................  
....................  
.................... BYTE const LCD_INIT_STRING[4] = {0x20 | (lcd_type << 2), 0xc, 1, 6}; 
....................                              // These bytes need to be sent to the LCD 
....................                              // to start it up. 
....................  
....................  
....................                              // The following are used for setting 
....................                              // the I/O port direction register. 
....................  
.................... struct lcd_pin_map const LCD_WRITE = {0,0,0,0,0}; // For write mode all pins are out 
.................... struct lcd_pin_map const LCD_READ = {0,0,0,0,15}; // For read mode data pins are in 
....................  
....................  
....................  
.................... BYTE lcd_read_byte() { 
....................       BYTE low,high; 
....................       set_tris_lcd(LCD_READ); 
*
007A:  MOVLW  F0
007B:  BSF    03.5
007C:  MOVWF  08
....................       lcd.rw = 1; 
007D:  BCF    03.5
007E:  BSF    08.2
....................       delay_cycles(1); 
007F:  NOP
....................       lcd.enable = 1; 
0080:  BSF    08.0
....................       delay_cycles(1); 
0081:  NOP
....................       high = lcd.data; 
0082:  MOVF   08,W
0083:  SWAPF  08,W
0084:  ANDLW  0F
0085:  MOVWF  39
....................       lcd.enable = 0; 
0086:  BCF    08.0
....................       delay_cycles(1); 
0087:  NOP
....................       lcd.enable = 1; 
0088:  BSF    08.0
....................       delay_us(1); 
....................       low = lcd.data; 
0089:  MOVF   08,W
008A:  SWAPF  08,W
008B:  ANDLW  0F
008C:  MOVWF  38
....................       lcd.enable = 0; 
008D:  BCF    08.0
....................       set_tris_lcd(LCD_WRITE); 
008E:  MOVLW  00
008F:  BSF    03.5
0090:  MOVWF  08
....................       return( (high<<4) | low); 
0091:  BCF    03.5
0092:  SWAPF  39,W
0093:  MOVWF  77
0094:  MOVLW  F0
0095:  ANDWF  77,F
0096:  MOVF   77,W
0097:  IORWF  38,W
0098:  MOVWF  78
.................... } 
....................  
....................  
.................... void lcd_send_nibble( BYTE n ) { 
....................       lcd.data = n; 
*
006E:  SWAPF  39,W
006F:  ANDLW  F0
0070:  MOVWF  77
0071:  MOVLW  0F
0072:  ANDWF  08,W
0073:  IORWF  77,W
0074:  MOVWF  08
....................       delay_cycles(1); 
0075:  NOP
....................       lcd.enable = 1; 
0076:  BSF    08.0
....................       delay_us(2); 
....................       lcd.enable = 0; 
0077:  BCF    08.0
.................... } 
0078:  RETLW  00
....................  
....................  
.................... void lcd_send_byte( BYTE address, BYTE n ) { 
....................  
....................       lcd.rs = 0; 
0079:  BCF    08.1
....................       while ( bit_test(lcd_read_byte(),7) ) ; 
*
0099:  MOVF   78,W
009A:  MOVWF  38
009B:  BTFSC  38.7
009C:  GOTO   07A
....................       lcd.rs = address; 
009D:  BTFSS  36.0
009E:  BCF    08.1
009F:  BTFSC  36.0
00A0:  BSF    08.1
....................       delay_cycles(1); 
00A1:  NOP
....................       lcd.rw = 0; 
00A2:  BCF    08.2
....................       delay_cycles(1); 
00A3:  NOP
....................       lcd.enable = 0; 
00A4:  BCF    08.0
....................       lcd_send_nibble(n >> 4); 
00A5:  SWAPF  37,W
00A6:  MOVWF  38
00A7:  MOVLW  0F
00A8:  ANDWF  38,F
00A9:  MOVF   38,W
00AA:  MOVWF  39
00AB:  CALL   06E
....................       lcd_send_nibble(n & 0xf); 
00AC:  MOVF   37,W
00AD:  ANDLW  0F
00AE:  MOVWF  38
00AF:  MOVWF  39
00B0:  CALL   06E
.................... } 
00B1:  RETLW  00
....................  
....................  
.................... void lcd_init() { 
....................     BYTE i; 
....................     set_tris_lcd(LCD_WRITE); 
00B2:  MOVLW  00
00B3:  BSF    03.5
00B4:  MOVWF  08
....................     lcd.rs = 0; 
00B5:  BCF    03.5
00B6:  BCF    08.1
....................     lcd.rw = 0; 
00B7:  BCF    08.2
....................     lcd.enable = 0; 
00B8:  BCF    08.0
....................     delay_ms(15); 
00B9:  MOVLW  0F
00BA:  MOVWF  32
00BB:  CALL   061
....................     for(i=1;i<=3;++i) { 
00BC:  MOVLW  01
00BD:  MOVWF  26
00BE:  MOVF   26,W
00BF:  SUBLW  03
00C0:  BTFSS  03.0
00C1:  GOTO   0CA
....................        lcd_send_nibble(3); 
00C2:  MOVLW  03
00C3:  MOVWF  39
00C4:  CALL   06E
....................        delay_ms(5); 
00C5:  MOVLW  05
00C6:  MOVWF  32
00C7:  CALL   061
....................     } 
00C8:  INCF   26,F
00C9:  GOTO   0BE
....................     lcd_send_nibble(2); 
00CA:  MOVLW  02
00CB:  MOVWF  39
00CC:  CALL   06E
....................     for(i=0;i<=3;++i) 
00CD:  CLRF   26
00CE:  MOVF   26,W
00CF:  SUBLW  03
00D0:  BTFSS  03.0
00D1:  GOTO   0DB
....................        lcd_send_byte(0,LCD_INIT_STRING[i]); 
00D2:  MOVF   26,W
00D3:  CALL   004
00D4:  MOVWF  27
00D5:  CLRF   36
00D6:  MOVF   27,W
00D7:  MOVWF  37
00D8:  CALL   079
00D9:  INCF   26,F
00DA:  GOTO   0CE
.................... } 
00DB:  BCF    0A.3
00DC:  BCF    0A.4
00DD:  GOTO   25B (RETURN)
....................  
....................  
.................... void lcd_gotoxy( BYTE x, BYTE y) { 
....................    BYTE address; 
....................  
....................    if(y!=1) 
*
00F5:  DECFSZ 33,W
00F6:  GOTO   0F8
00F7:  GOTO   0FB
....................      address=lcd_line_two; 
00F8:  MOVLW  40
00F9:  MOVWF  34
....................    else 
00FA:  GOTO   0FC
....................      address=0; 
00FB:  CLRF   34
....................    address+=x-1; 
00FC:  MOVLW  01
00FD:  SUBWF  32,W
00FE:  ADDWF  34,F
....................    lcd_send_byte(0,0x80|address); 
00FF:  MOVF   34,W
0100:  IORLW  80
0101:  MOVWF  35
0102:  CLRF   36
0103:  MOVF   35,W
0104:  MOVWF  37
0105:  CALL   079
.................... } 
....................  
.................... void lcd_putc( char c) { 
....................    switch (c) { 
*
00DE:  MOVF   31,W
00DF:  XORLW  0C
00E0:  BTFSC  03.2
00E1:  GOTO   0E9
00E2:  XORLW  06
00E3:  BTFSC  03.2
00E4:  GOTO   0F1
00E5:  XORLW  02
00E6:  BTFSC  03.2
00E7:  GOTO   107
00E8:  GOTO   10C
....................      case '\f'   : lcd_send_byte(0,1); 
00E9:  CLRF   36
00EA:  MOVLW  01
00EB:  MOVWF  37
00EC:  CALL   079
....................                    delay_ms(2); 
00ED:  MOVLW  02
00EE:  MOVWF  32
00EF:  CALL   061
....................                                            break; 
00F0:  GOTO   112
....................      case '\n'   : lcd_gotoxy(1,2);        break; 
00F1:  MOVLW  01
00F2:  MOVWF  32
00F3:  MOVLW  02
00F4:  MOVWF  33
*
0106:  GOTO   112
....................      case '\b'   : lcd_send_byte(0,0x10);  break; 
0107:  CLRF   36
0108:  MOVLW  10
0109:  MOVWF  37
010A:  CALL   079
010B:  GOTO   112
....................      default     : lcd_send_byte(1,c);     break; 
010C:  MOVLW  01
010D:  MOVWF  36
010E:  MOVF   31,W
010F:  MOVWF  37
0110:  CALL   079
0111:  GOTO   112
....................    } 
.................... } 
0112:  RETLW  00
....................  
.................... char lcd_getc( BYTE x, BYTE y) { 
....................    char value; 
....................  
....................     lcd_gotoxy(x,y); 
....................     while ( bit_test(lcd_read_byte(),7) ); // wait until busy flag is low 
....................     lcd.rs=1; 
....................     value = lcd_read_byte(); 
....................     lcd.rs=0; 
....................     return(value); 
.................... } 
....................  
....................  
....................  
.................... int histerese=1; 
*
0238:  MOVLW  01
0239:  BCF    03.5
023A:  MOVWF  20
.................... long int definida=50,lida; 
023B:  MOVLW  32
023C:  MOVWF  21
023D:  CLRF   22
....................  
....................  
....................  
....................  
....................  
.................... void main(){ 
*
022D:  CLRF   04
022E:  BCF    03.7
022F:  MOVLW  1F
0230:  ANDWF  03,F
0231:  BSF    03.5
0232:  BSF    1F.0
0233:  BSF    1F.1
0234:  BSF    1F.2
0235:  BCF    1F.3
0236:  MOVLW  07
0237:  MOVWF  1C
....................     
....................     setup_adc_ports(AN0_AN1_AN3); 
*
0240:  BSF    03.5
0241:  BCF    1F.0
0242:  BCF    1F.1
0243:  BSF    1F.2
0244:  BCF    1F.3
....................    setup_adc(ADC_CLOCK_DIV_32);    
0245:  BCF    1F.6
0246:  BCF    03.5
0247:  BCF    1F.6
0248:  BSF    1F.7
0249:  BSF    03.5
024A:  BCF    1F.7
024B:  BCF    03.5
024C:  BSF    1F.0
....................    setup_comparator(NC_NC_NC_NC); 
024D:  MOVLW  07
024E:  BSF    03.5
024F:  MOVWF  1C
0250:  MOVF   05,W
0251:  GOTO   252
0252:  GOTO   253
0253:  MOVF   1C,W
0254:  BCF    03.5
0255:  BCF    0D.6
....................    setup_vref(true); 
0256:  MOVLW  01
0257:  BSF    03.5
0258:  MOVWF  1D
....................    lcd_init(); 
0259:  BCF    03.5
025A:  GOTO   0B2
....................     
....................    set_tris_c(0b11111111); 
025B:  MOVLW  FF
025C:  BSF    03.5
025D:  MOVWF  07
025E:  BCF    03.5
025F:  MOVWF  25
....................    set_tris_b(0b01111111); 
0260:  MOVLW  7F
0261:  BSF    03.5
0262:  MOVWF  06
....................    port_b_pullups(true); 
0263:  BCF    01.7
....................    set_tris_a(0b11111111); 
0264:  MOVLW  FF
0265:  MOVWF  05
....................     printf(lcd_putc,"\fRaul THC"); 
0266:  BCF    03.5
0267:  CLRF   26
0268:  MOVF   26,W
0269:  CALL   00C
026A:  INCF   26,F
026B:  MOVWF  77
026C:  MOVWF  31
026D:  CALL   0DE
026E:  MOVLW  09
026F:  SUBWF  26,W
0270:  BTFSS  03.2
0271:  GOTO   268
....................     delay_ms(3000); 
0272:  MOVLW  0C
0273:  MOVWF  26
0274:  MOVLW  FA
0275:  MOVWF  32
0276:  CALL   061
0277:  DECFSZ 26,F
0278:  GOTO   274
....................     
....................    while(true){ 
....................    set_adc_channel(0);    
0279:  MOVLW  00
027A:  MOVWF  78
027B:  MOVF   1F,W
027C:  ANDLW  C7
027D:  IORWF  78,W
027E:  MOVWF  1F
....................     lida=read_adc(); 
027F:  BSF    1F.2
0280:  BTFSC  1F.2
0281:  GOTO   280
0282:  MOVF   1E,W
0283:  CLRF   24
0284:  MOVWF  23
....................     lida=lida*0.1960; 
0285:  MOVF   24,W
0286:  MOVWF  27
0287:  MOVF   23,W
0288:  MOVWF  26
0289:  GOTO   113
028A:  MOVF   7A,W
028B:  MOVWF  29
028C:  MOVF   79,W
028D:  MOVWF  28
028E:  MOVF   78,W
028F:  MOVWF  27
0290:  MOVF   77,W
0291:  MOVWF  26
0292:  MOVLW  39
0293:  MOVWF  2D
0294:  MOVLW  B4
0295:  MOVWF  2C
0296:  MOVLW  48
0297:  MOVWF  2B
0298:  MOVLW  7C
0299:  MOVWF  2A
029A:  GOTO   132
029B:  MOVF   7A,W
029C:  MOVWF  29
029D:  MOVF   79,W
029E:  MOVWF  28
029F:  MOVF   78,W
02A0:  MOVWF  27
02A1:  MOVF   77,W
02A2:  MOVWF  26
02A3:  GOTO   1A9
02A4:  MOVF   79,W
02A5:  MOVWF  24
02A6:  MOVF   78,W
02A7:  MOVWF  23
....................     delay_ms(300);    
02A8:  MOVLW  02
02A9:  MOVWF  26
02AA:  MOVLW  96
02AB:  MOVWF  32
02AC:  CALL   061
02AD:  DECFSZ 26,F
02AE:  GOTO   2AA
....................     
....................     
....................    while((input(pin_b4)==0)||(input(pin_b5)==0)){ 
02AF:  BSF    03.5
02B0:  BSF    06.4
02B1:  BCF    03.5
02B2:  BTFSS  06.4
02B3:  GOTO   2B9
02B4:  BSF    03.5
02B5:  BSF    06.5
02B6:  BCF    03.5
02B7:  BTFSC  06.5
02B8:  GOTO   300
....................    printf(lcd_putc,"\fAjuste de tensao"); 
02B9:  CLRF   26
02BA:  MOVF   26,W
02BB:  CALL   01A
02BC:  INCF   26,F
02BD:  MOVWF  77
02BE:  MOVWF  31
02BF:  CALL   0DE
02C0:  MOVLW  11
02C1:  SUBWF  26,W
02C2:  BTFSS  03.2
02C3:  GOTO   2BA
....................    printf(lcd_putc,"\ndistancia:%lu",definida); 
02C4:  CLRF   26
02C5:  MOVF   26,W
02C6:  CALL   030
02C7:  INCF   26,F
02C8:  MOVWF  77
02C9:  MOVWF  31
02CA:  CALL   0DE
02CB:  MOVLW  0B
02CC:  SUBWF  26,W
02CD:  BTFSS  03.2
02CE:  GOTO   2C5
02CF:  MOVLW  10
02D0:  MOVWF  04
02D1:  MOVF   22,W
02D2:  MOVWF  29
02D3:  MOVF   21,W
02D4:  MOVWF  28
02D5:  CALL   1CA
....................     
....................     if((input(pin_b4)==0)&&(definida<200)){ 
02D6:  BSF    03.5
02D7:  BSF    06.4
02D8:  BCF    03.5
02D9:  BTFSC  06.4
02DA:  GOTO   2E6
02DB:  MOVF   22,F
02DC:  BTFSS  03.2
02DD:  GOTO   2E6
02DE:  MOVF   21,W
02DF:  SUBLW  C7
02E0:  BTFSS  03.0
02E1:  GOTO   2E6
....................     definida=definida+1; 
02E2:  MOVLW  01
02E3:  ADDWF  21,F
02E4:  BTFSC  03.0
02E5:  INCF   22,F
....................     } 
....................      
....................     if((input(pin_b5)==0)&&(definida>1)){ 
02E6:  BSF    03.5
02E7:  BSF    06.5
02E8:  BCF    03.5
02E9:  BTFSC  06.5
02EA:  GOTO   2F8
02EB:  MOVF   22,F
02EC:  BTFSS  03.2
02ED:  GOTO   2F2
02EE:  MOVF   21,W
02EF:  SUBLW  01
02F0:  BTFSC  03.0
02F1:  GOTO   2F8
....................     definida=definida-1; 
02F2:  MOVLW  01
02F3:  SUBWF  21,F
02F4:  MOVLW  00
02F5:  BTFSS  03.0
02F6:  MOVLW  01
02F7:  SUBWF  22,F
....................     } 
....................     delay_ms(800); 
02F8:  MOVLW  04
02F9:  MOVWF  26
02FA:  MOVLW  C8
02FB:  MOVWF  32
02FC:  CALL   061
02FD:  DECFSZ 26,F
02FE:  GOTO   2FA
....................    } 
02FF:  GOTO   2AF
....................    if((lida-histerese)>definida){ 
0300:  MOVF   20,W
0301:  SUBWF  23,W
0302:  MOVWF  26
0303:  MOVF   24,W
0304:  MOVWF  27
0305:  MOVLW  00
0306:  BTFSS  03.0
0307:  MOVLW  01
0308:  SUBWF  27,F
0309:  MOVF   22,W
030A:  SUBWF  27,W
030B:  BTFSS  03.0
030C:  GOTO   318
030D:  BTFSS  03.2
030E:  GOTO   313
030F:  MOVF   26,W
0310:  SUBWF  21,W
0311:  BTFSC  03.0
0312:  GOTO   318
....................    output_high(pin_a1); 
0313:  BSF    03.5
0314:  BCF    05.1
0315:  BCF    03.5
0316:  BSF    05.1
....................    } 
....................    else output_low(pin_a1); 
0317:  GOTO   31C
0318:  BSF    03.5
0319:  BCF    05.1
031A:  BCF    03.5
031B:  BCF    05.1
....................     
....................    if((lida+histerese)<definida){ 
031C:  MOVF   20,W
031D:  ADDWF  23,W
031E:  MOVWF  26
031F:  MOVF   24,W
0320:  MOVWF  27
0321:  BTFSC  03.0
0322:  INCF   27,F
0323:  MOVF   27,W
0324:  SUBWF  22,W
0325:  BTFSS  03.0
0326:  GOTO   332
0327:  BTFSS  03.2
0328:  GOTO   32D
0329:  MOVF   21,W
032A:  SUBWF  26,W
032B:  BTFSC  03.0
032C:  GOTO   332
....................    output_high(pin_a2); 
032D:  BSF    03.5
032E:  BCF    05.2
032F:  BCF    03.5
0330:  BSF    05.2
....................    } 
....................    else output_low(pin_a2); 
0331:  GOTO   336
0332:  BSF    03.5
0333:  BCF    05.2
0334:  BCF    03.5
0335:  BCF    05.2
....................    delay_ms(200); 
0336:  MOVLW  C8
0337:  MOVWF  32
0338:  CALL   061
....................   printf(lcd_putc,"\fDefinida 1:%lu\nLida :%lu",definida,lida); 
0339:  CLRF   26
033A:  MOVF   26,W
033B:  CALL   043
033C:  INCF   26,F
033D:  MOVWF  77
033E:  MOVWF  31
033F:  CALL   0DE
0340:  MOVLW  0C
0341:  SUBWF  26,W
0342:  BTFSS  03.2
0343:  GOTO   33A
0344:  MOVLW  10
0345:  MOVWF  04
0346:  MOVF   22,W
0347:  MOVWF  29
0348:  MOVF   21,W
0349:  MOVWF  28
034A:  CALL   1CA
034B:  MOVLW  0F
034C:  MOVWF  27
034D:  MOVF   27,W
034E:  CALL   043
034F:  INCF   27,F
0350:  MOVWF  77
0351:  MOVWF  31
0352:  CALL   0DE
0353:  MOVLW  16
0354:  SUBWF  27,W
0355:  BTFSS  03.2
0356:  GOTO   34D
0357:  MOVLW  10
0358:  MOVWF  04
0359:  MOVF   24,W
035A:  MOVWF  29
035B:  MOVF   23,W
035C:  MOVWF  28
035D:  CALL   1CA
....................    
....................    } 
035E:  GOTO   279
....................     
.................... } 
....................  
....................  
035F:  SLEEP

Configuration Fuses:
   Word  1: 3F72   HS NOWDT PUT NODEBUG NOPROTECT BROWNOUT NOLVP NOCPD NOWRT
